{
  "summary": {
    "total_modules": 61,
    "total_classes": 551,
    "total_methods": 814,
    "total_lines": 39539,
    "average_complexity": 72.96760229508196
  },
  "implementation_status": {
    "placeholder": 644,
    "implemented": 168,
    "unimplemented": 2
  },
  "sfm_coverage": {
    "Social Institutions": 32,
    "Social Beliefs": 1,
    "Cultural Values": 20,
    "Technology": 2,
    "Natural Environment": 4,
    "Mixed SFM Components": 1,
    "Personal Attitudes": 1
  },
  "size_distribution": {
    "small (<100 lines)": 8,
    "medium (100-500 lines)": 21,
    "large (>500 lines)": 32
  },
  "modules": [
    {
      "filename": "institutional_learning.py",
      "path": "/home/runner/work/beta/beta/models/institutional_learning.py",
      "total_lines": 342,
      "class_count": 11,
      "function_count": 0,
      "classes": [
        {
          "name": "LearningType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "AdaptationMechanism",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "InstitutionalMemory",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "KnowledgeType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "InstitutionalLearning",
          "line_count": 40,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "AdaptiveCapacity",
          "line_count": 39,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "OrganizationalMemory",
          "line_count": 37,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "KnowledgeManagement",
          "line_count": 40,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionalEvolution",
          "line_count": 38,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "LearningNetwork",
          "line_count": 31,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionalInnovation",
          "line_count": 38,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.sfm_enums.EvolutionaryStage",
        "models.sfm_enums.InstitutionalScope"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.0
    },
    {
      "filename": "social_indicators.py",
      "path": "/home/runner/work/beta/beta/models/social_indicators.py",
      "total_lines": 1317,
      "class_count": 6,
      "function_count": 0,
      "classes": [
        {
          "name": "IndicatorMeasurement",
          "line_count": 56,
          "method_count": 3,
          "methods": [
            {
              "name": "get_numeric_value",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "is_valid",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "calculate_quality_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "SocialIndicator",
          "line_count": 270,
          "method_count": 10,
          "methods": [
            {
              "name": "add_measurement",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "measurement"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "get_measurements_in_period",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "start_date",
                "end_date"
              ],
              "return_annotation": "List[IndicatorMeasurement]",
              "decorators": []
            },
            {
              "name": "calculate_trend",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "periods"
              ],
              "return_annotation": "TrendDirection",
              "decorators": []
            },
            {
              "name": "calculate_volatility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "periods"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "get_current_status",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "validate_measurement",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "measurement"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "assess_matrix_integration_strength",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 38,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_matrix_measurement_gaps",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "calculate_policy_impact_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "assess_delivery_system_integration",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "IndicatorDatabase",
          "line_count": 718,
          "method_count": 24,
          "methods": [
            {
              "name": "conduct_comprehensive_matrix_indicator_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_matrix_coverage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_indicator_matrix_strength",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_cross_matrix_relationships",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_institutional_integration",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_policy_indicator_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 45,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_delivery_system_alignment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_identify_matrix_indicator_gaps",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 48,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "_generate_optimization_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 49,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "add_indicator",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "indicator",
                "group"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "get_indicators_by_type",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "indicator_type"
              ],
              "return_annotation": "List[SocialIndicator]",
              "decorators": []
            },
            {
              "name": "get_indicators_by_value_category",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "category"
              ],
              "return_annotation": "List[SocialIndicator]",
              "decorators": []
            },
            {
              "name": "get_indicators_for_matrix_cell",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "cell_id"
              ],
              "return_annotation": "List[SocialIndicator]",
              "decorators": []
            },
            {
              "name": "calculate_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 27,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "calculate_quality_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "generate_summary_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_type_coverage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, int]",
              "decorators": []
            },
            {
              "name": "_calculate_category_coverage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, int]",
              "decorators": []
            },
            {
              "name": "update_matrix_coverage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "calculate_matrix_integration_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 44,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_matrix_coverage_gaps",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 45,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "calculate_matrix_integration_scores",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 31,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[uuid.UUID, float]",
              "decorators": []
            },
            {
              "name": "generate_matrix_integration_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_generate_integration_recommendations",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "completeness",
                "gaps"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "StatisticalAnalysisPipeline",
          "line_count": 51,
          "method_count": 1,
          "methods": [
            {
              "name": "execute_comprehensive_statistical_analysis",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "indicator_database"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "StatisticalAnalyzer",
          "line_count": 40,
          "method_count": 4,
          "methods": [
            {
              "name": "analyzer",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 5,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "IndicatorAnalyzer",
              "decorators": [
                "property"
              ]
            },
            {
              "name": "analyze_correlations",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "indicator_ids",
                "time_period"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "perform_trend_analysis",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "indicator_id",
                "periods"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "create_composite_indicator",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "component_indicators",
                "weights",
                "aggregation_method"
              ],
              "return_annotation": "SocialIndicator",
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "IndicatorDashboard",
          "line_count": 128,
          "method_count": 3,
          "methods": [
            {
              "name": "add_monitored_indicator",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "indicator_id",
                "thresholds"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "check_alerts",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 61,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "generate_summary_dashboard",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 44,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "statistics",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.meta_entities.Scenario",
        "models.metadata_models.ValidationRule",
        "models.sfm_enums.IndicatorType",
        "models.sfm_enums.SocialFabricIndicatorType",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.EvidenceQuality",
        "models.sfm_enums.MeasurementApproach",
        "models.statistical_analysis.AggregationMethod",
        "models.statistical_analysis.TrendDirection",
        "models.statistical_analysis.StatisticalAnalysisTools",
        "models.statistical_analysis.IndicatorAnalyzer"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 413.9
    },
    {
      "filename": "political_action.py",
      "path": "/home/runner/work/beta/beta/models/political_action.py",
      "total_lines": 1773,
      "class_count": 14,
      "function_count": 0,
      "classes": [
        {
          "name": "PoliticalActionType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "PolicyStage",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ImplementationStrategy",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "BudgetaryProcess",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "AdministrativeLevel",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "PoliticalAction",
          "line_count": 133,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_political_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_success_factors",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 45,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, str]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "LobbyingActivity",
          "line_count": 68,
          "method_count": 2,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 2,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": null,
              "decorators": []
            },
            {
              "name": "assess_lobbying_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "PoliticalAction"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "BudgetaryAction",
          "line_count": 76,
          "method_count": 1,
          "methods": [
            {
              "name": "analyze_budget_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "AdministrativeImplementation",
          "line_count": 137,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_implementation_capacity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_implementation_risks",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 50,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "PolicyAdvocacyCoalition",
          "line_count": 134,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_coalition_strength",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "analyze_coalition_sustainability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 49,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "AdvancedLobbyingProcess",
          "line_count": 251,
          "method_count": 5,
          "methods": [
            {
              "name": "analyze_lobbying_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 62,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "analyze_influence_pathways",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 48,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_ceremonial_instrumental_lobbying_balance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 49,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_get_access_multiplier",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "access_level"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "generate_lobbying_optimization_strategy",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 51,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "LegislativeProcessModeling",
          "line_count": 288,
          "method_count": 4,
          "methods": [
            {
              "name": "model_bill_progression_probability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 78,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "bill_id"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "analyze_voting_coalition_dynamics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 88,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "model_amendment_impact_scenarios",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 62,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "base_bill_id"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_legislative_strategy_optimization",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "BudgetaryProcessIntegration",
          "line_count": 353,
          "method_count": 17,
          "methods": [
            {
              "name": "analyze_policy_fiscal_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 72,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy_id"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "model_budget_allocation_scenarios",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_cross_institutional_budget_coordination",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 64,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_cost_certainty",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "cost_estimates"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_calculate_funding_adequacy",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "available",
                "required"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_budget_timeline_alignment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy_id"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_fiscal_sustainability_score",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "total_cost",
                "funding_gap",
                "cost_trajectory"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_get_sustainability_level",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "score"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_identify_fiscal_risks",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "feasibility_analysis"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_suggest_fiscal_mitigation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "feasibility_analysis"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_calculate_utilization_efficiency",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_generate_scenario_allocation",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "scenario_name",
                "total_budget"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_predict_scenario_outcomes",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "scenario_name",
                "allocation"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_implementation_difficulty",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "allocation"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_predict_stakeholder_acceptance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "scenario_name"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_compare_budget_scenarios",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "baseline",
                "alternatives"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_identify_authority_overlaps",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "CrossInstitutionalCoordination",
          "line_count": 242,
          "method_count": 8,
          "methods": [
            {
              "name": "assess_coordination_complexity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 63,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "develop_coordination_optimization_strategy",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 53,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "model_implementation_pathways",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 62,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy_id"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_count_hierarchy_levels",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "int",
              "decorators": []
            },
            {
              "name": "_calculate_sequential_timeline",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy_id"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_calculate_parallel_timeline",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 5,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy_id"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_compare_implementation_pathways",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "pathways",
                "pathway_data"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_generate_implementation_steps",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "pathway",
                "policy_id"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 227.28
    },
    {
      "filename": "system_boundary.py",
      "path": "/home/runner/work/beta/beta/models/system_boundary.py",
      "total_lines": 582,
      "class_count": 7,
      "function_count": 0,
      "classes": [
        {
          "name": "ProblemType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ProblemUrgency",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ScopeComplexity",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "SystemBoundary",
          "line_count": 159,
          "method_count": 2,
          "methods": [
            {
              "name": "validate_boundary_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 78,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_boundary_sensitivity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ProblemDefinition",
          "line_count": 167,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_problem_complexity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 77,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_analysis_requirements",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "AnalysisScope",
          "line_count": 81,
          "method_count": 1,
          "methods": [
            {
              "name": "validate_scope_adequacy",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 47,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "BoundaryValidator",
          "line_count": 107,
          "method_count": 3,
          "methods": [
            {
              "name": "validate_system_boundary",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "boundary"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_validate_boundary_consistency",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 31,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "boundary"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_validate_boundary_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "boundary"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.SystemBoundaryType",
        "models.sfm_enums.InstitutionalScope",
        "models.sfm_enums.ValueCategory"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 12.26856
    },
    {
      "filename": "economic_analysis.py",
      "path": "/home/runner/work/beta/beta/models/economic_analysis.py",
      "total_lines": 76,
      "class_count": 3,
      "function_count": 0,
      "classes": [
        {
          "name": "TransactionCost",
          "line_count": 14,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "CoordinationMechanism",
          "line_count": 14,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "CommonsGovernance",
          "line_count": 20,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.List",
        "typing.Optional",
        "models.base_nodes.Node",
        "models.sfm_enums.CoordinationMechanismType",
        "models.sfm_enums.CoordinationScope",
        "models.sfm_enums.CommonsGovernanceType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.0304
    },
    {
      "filename": "sfm_system_integration.py",
      "path": "/home/runner/work/beta/beta/models/sfm_system_integration.py",
      "total_lines": 310,
      "class_count": 8,
      "function_count": 0,
      "classes": [
        {
          "name": "IntegrationType",
          "line_count": 25,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "IntegrationStatus",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "SystemCoherenceLevel",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "SFMSystemIntegrator",
          "line_count": 49,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "SystemIntegrationValidator",
          "line_count": 39,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "IntegratedAnalysisFramework",
          "line_count": 50,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "SystemCoherenceChecker",
          "line_count": 42,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "IntegrationQualityAssurance",
          "line_count": 46,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.sfm_enums.ValidationMethod",
        "models.sfm_enums.AnalyticalMethod"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.0
    },
    {
      "filename": "social_assessment.py",
      "path": "/home/runner/work/beta/beta/models/social_assessment.py",
      "total_lines": 183,
      "class_count": 3,
      "function_count": 0,
      "classes": [
        {
          "name": "SocialValueAssessment",
          "line_count": 21,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs"
          ],
          "is_dataclass": true
        },
        {
          "name": "SocialFabricIndicator",
          "line_count": 54,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_fabric_health",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs"
          ],
          "is_dataclass": true
        },
        {
          "name": "SocialCost",
          "line_count": 80,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_cost_severity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 52,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "models.base_nodes.Node",
        "models.sfm_enums.SocialFabricIndicatorType",
        "models.sfm_enums.SocialValueDimension",
        "models.sfm_enums.SocialCostType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Beliefs",
      "complexity_score": 0.5672999999999999
    },
    {
      "filename": "sfm_institutional_mapping.py",
      "path": "/home/runner/work/beta/beta/models/sfm_institutional_mapping.py",
      "total_lines": 344,
      "class_count": 9,
      "function_count": 0,
      "classes": [
        {
          "name": "InstitutionalType",
          "line_count": 42,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "InstitutionalRole",
          "line_count": 26,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "InstitutionalPowerLevel",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "RelationshipType",
          "line_count": 29,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "InstitutionalActor",
          "line_count": 54,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionalMapping",
          "line_count": 39,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionalNetwork",
          "line_count": 38,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionalHierarchy",
          "line_count": 32,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionalRoleAnalysis",
          "line_count": 32,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.sfm_enums.InstitutionalScope",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.ValidationMethod"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.0
    },
    {
      "filename": "complex_analysis.py",
      "path": "/home/runner/work/beta/beta/models/complex_analysis.py",
      "total_lines": 479,
      "class_count": 3,
      "function_count": 0,
      "classes": [
        {
          "name": "DigraphAnalysis",
          "line_count": 220,
          "method_count": 5,
          "methods": [
            {
              "name": "analyze_propagation_sequences",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 53,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "initial_change",
                "time_steps"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "identify_critical_sequences",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 22,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "detect_sequence_patterns",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "assess_sequence_stability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "recommend_sequence_interventions",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CircularCausationProcess",
          "line_count": 72,
          "method_count": 1,
          "methods": [
            {
              "name": "analyze_causation_dynamics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ConflictDetection",
          "line_count": 162,
          "method_count": 4,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "detect_matrix_contradictions",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 25,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix_cells"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "assess_conflict_priority",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "generate_conflict_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "models.base_nodes.Node",
        "models.sfm_enums.ConflictType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 17.4356
    },
    {
      "filename": "matrix_components.py",
      "path": "/home/runner/work/beta/beta/models/matrix_components.py",
      "total_lines": 478,
      "class_count": 3,
      "function_count": 0,
      "classes": [
        {
          "name": "MatrixCell",
          "line_count": 361,
          "method_count": 12,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 6,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "calculate_weighted_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "criteria_weight"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "get_confidence_adjusted_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 5,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "get_evidence_weighted_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "get_standardized_correlation_value",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "set_correlation_from_numeric",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "assess_cell_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 50,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "analyze_delivery_relationships",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_cultural_integration",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 38,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "analyze_ceremonial_instrumental_balance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_ecological_integration",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "analyze_social_indicators",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "SFMCriteria",
          "line_count": 68,
          "method_count": 2,
          "methods": [
            {
              "name": "calculate_hayden_priority_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "assess_criterion_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "SFMMatrix",
          "line_count": 17,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Natural Environment"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "models.base_nodes.Node",
        "models.sfm_enums.CorrelationType",
        "models.sfm_enums.CorrelationScale",
        "models.sfm_enums.EvidenceQuality",
        "models.sfm_enums.CriteriaType",
        "models.sfm_enums.CriteriaPriority",
        "models.sfm_enums.MeasurementApproach"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 42.714079999999996
    },
    {
      "filename": "technology_integration.py",
      "path": "/home/runner/work/beta/beta/models/technology_integration.py",
      "total_lines": 75,
      "class_count": 2,
      "function_count": 0,
      "classes": [
        {
          "name": "ToolSkillTechnologyComplex",
          "line_count": 12,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Technology"
          ],
          "is_dataclass": true
        },
        {
          "name": "EcologicalSystem",
          "line_count": 42,
          "method_count": 1,
          "methods": [
            {
              "name": "calculate_sustainability_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "models.base_nodes.Node",
        "models.sfm_enums.ToolSkillTechnologyType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Technology",
      "complexity_score": 0.063
    },
    {
      "filename": "institutional_adjustment.py",
      "path": "/home/runner/work/beta/beta/models/institutional_adjustment.py",
      "total_lines": 879,
      "class_count": 7,
      "function_count": 0,
      "classes": [
        {
          "name": "AdjustmentStage",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "AdjustmentOutcome",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ResistanceType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "AdjustmentTriggerEvent",
          "line_count": 91,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_trigger_significance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "predict_adjustment_requirements",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "ResistanceAnalysis",
          "line_count": 122,
          "method_count": 3,
          "methods": [
            {
              "name": "analyze_resistance_patterns",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "calculate_resistance_risk",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "recommend_resistance_strategies",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, str]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionalAdjustment",
          "line_count": 320,
          "method_count": 13,
          "methods": [
            {
              "name": "advance_to_next_stage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 23,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "_can_advance_from_stage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 27,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "stage"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "calculate_adjustment_progress",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 5,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "assess_adjustment_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 44,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_resource_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 13,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "_assess_stakeholder_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "_assess_resistance_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "_assess_timeline_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "_identify_risk_factors",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "assessment"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "_identify_success_factors",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "assessment"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "evaluate_adjustment_outcomes",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_adjustment_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_generate_adjustment_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "AdjustmentCoordinator",
          "line_count": 277,
          "method_count": 6,
          "methods": [
            {
              "name": "identify_adjustment_conflicts",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 44,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "adjustments"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "prioritize_adjustments",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "adjustments"
              ],
              "return_annotation": "List[Tuple[uuid.UUID, float]]",
              "decorators": []
            },
            {
              "name": "develop_coordination_strategy",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 60,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "adjustments"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_group_compatible_adjustments",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "adjustments",
                "conflicts"
              ],
              "return_annotation": "List[List[uuid.UUID]]",
              "decorators": []
            },
            {
              "name": "_generate_resource_recommendations",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 24,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "adjustments"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "monitor_system_adjustment_capacity",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 50,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "adjustments"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.sfm_enums.AdjustmentType",
        "models.sfm_enums.AdjustmentTrigger"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Natural Environment",
      "complexity_score": 111.98460000000001
    },
    {
      "filename": "metadata_models.py",
      "path": "/home/runner/work/beta/beta/models/metadata_models.py",
      "total_lines": 47,
      "class_count": 3,
      "function_count": 0,
      "classes": [
        {
          "name": "TemporalDynamics",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValidationRule",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ModelMetadata",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "models.meta_entities.TimeSlice",
        "models.sfm_enums.TemporalFunctionType",
        "models.sfm_enums.ValidationRuleType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.0
    },
    {
      "filename": "stakeholder_power.py",
      "path": "/home/runner/work/beta/beta/models/stakeholder_power.py",
      "total_lines": 346,
      "class_count": 10,
      "function_count": 0,
      "classes": [
        {
          "name": "PowerType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "InfluenceStrategy",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "CoalitionType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "PowerDynamic",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "PowerAssessment",
          "line_count": 57,
          "method_count": 1,
          "methods": [
            {
              "name": "calculate_overall_power",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "InfluenceNetwork",
          "line_count": 41,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "StakeholderCoalition",
          "line_count": 48,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "PowerRelationship",
          "line_count": 42,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "PowerMap",
          "line_count": 41,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "PowerShift",
          "line_count": 42,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.39443999999999996
    },
    {
      "filename": "institutional_analysis.py",
      "path": "/home/runner/work/beta/beta/models/institutional_analysis.py",
      "total_lines": 56,
      "class_count": 2,
      "function_count": 0,
      "classes": [
        {
          "name": "InstitutionalStructure",
          "line_count": 16,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "PathDependencyAnalysis",
          "line_count": 19,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "models.base_nodes.Node",
        "models.sfm_enums.PathDependencyType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.02128
    },
    {
      "filename": "whole_system_organization.py",
      "path": "/home/runner/work/beta/beta/models/whole_system_organization.py",
      "total_lines": 713,
      "class_count": 7,
      "function_count": 0,
      "classes": [
        {
          "name": "BoundaryPermeability",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "SystemCoherence",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "SubSystemType",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "SystemBoundary",
          "line_count": 127,
          "method_count": 3,
          "methods": [
            {
              "name": "assess_boundary_integrity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_boundary_tensions",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "calculate_permeability_index",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "SubSystemComponent",
          "line_count": 106,
          "method_count": 3,
          "methods": [
            {
              "name": "calculate_system_integration_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "assess_subsystem_health",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 28,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_improvement_opportunities",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 27,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "WholeSystemOrganization",
          "line_count": 289,
          "method_count": 7,
          "methods": [
            {
              "name": "add_subsystem",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "subsystem"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "remove_subsystem",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "subsystem_id"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "calculate_system_coherence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 31,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "assess_system_health",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 60,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_generate_health_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "health_assessment"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "identify_system_boundaries_issues",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "generate_system_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 60,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "BoundaryManager",
          "line_count": 123,
          "method_count": 4,
          "methods": [
            {
              "name": "monitor_boundary_violations",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 38,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "boundary",
                "recent_activities"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "_check_spatial_compliance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "location",
                "boundary"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "recommend_boundary_adjustments",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "boundary"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "calculate_management_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.sfm_enums.SystemBoundaryType",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.InstitutionalScope"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 45.83164
    },
    {
      "filename": "meta_entities.py",
      "path": "/home/runner/work/beta/beta/models/meta_entities.py",
      "total_lines": 180,
      "class_count": 7,
      "function_count": 0,
      "classes": [
        {
          "name": "ScenarioType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "UncertaintyType",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "TimeSlice",
          "line_count": 12,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": null,
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "SpatialUnit",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "Scenario",
          "line_count": 48,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "ScenarioSet",
          "line_count": 31,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "ScenarioPath",
          "line_count": 35,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.0432
    },
    {
      "filename": "multi_scale_integration.py",
      "path": "/home/runner/work/beta/beta/models/multi_scale_integration.py",
      "total_lines": 346,
      "class_count": 12,
      "function_count": 0,
      "classes": [
        {
          "name": "SystemLevel",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ScaleType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "IntegrationMechanism",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ScaleInteractionType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ScaleLevel",
          "line_count": 33,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ScaleInteraction",
          "line_count": 33,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "MultiScaleSystem",
          "line_count": 37,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CrossScaleInstitution",
          "line_count": 32,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ScaleMismatch",
          "line_count": 31,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "VerticalIntegration",
          "line_count": 32,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "HorizontalIntegration",
          "line_count": 37,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ScaleTransition",
          "line_count": 36,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.0
    },
    {
      "filename": "value_inquiry.py",
      "path": "/home/runner/work/beta/beta/models/value_inquiry.py",
      "total_lines": 522,
      "class_count": 10,
      "function_count": 0,
      "classes": [
        {
          "name": "ValueType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "InquiryMethod",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "KnowledgeValidationType",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "NormativeCriteria",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValueConflictType",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValueInquiry",
          "line_count": 120,
          "method_count": 2,
          "methods": [
            {
              "name": "conduct_consequentialist_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_instrumental_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "KnowledgeValidation",
          "line_count": 64,
          "method_count": 1,
          "methods": [
            {
              "name": "validate_knowledge_instrumentally",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "NormativeEvaluation",
          "line_count": 120,
          "method_count": 4,
          "methods": [
            {
              "name": "calculate_weighted_normative_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "identify_normative_tensions",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "_identify_tension_type",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 25,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "criteria1",
                "criteria2"
              ],
              "return_annotation": "Optional[str]",
              "decorators": []
            },
            {
              "name": "_suggest_tension_resolution",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 13,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "criteria1",
                "criteria2"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueSynthesis",
          "line_count": 35,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstrumentalistInquiryProcess",
          "line_count": 97,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_instrumentalist_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "generate_inquiry_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 28,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 10.210320000000001
    },
    {
      "filename": "indicator_systems.py",
      "path": "/home/runner/work/beta/beta/models/indicator_systems.py",
      "total_lines": 764,
      "class_count": 9,
      "function_count": 0,
      "classes": [
        {
          "name": "IndicatorCategory",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "IndicatorDataType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "IndicatorFrequency",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "IndicatorTrend",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "IndicatorSpecification",
          "line_count": 79,
          "method_count": 1,
          "methods": [
            {
              "name": "validate_specification_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "SocialFabricIndicator",
          "line_count": 197,
          "method_count": 3,
          "methods": [
            {
              "name": "calculate_performance_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "analyze_trend_pattern",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 69,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_data_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 68,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs"
          ],
          "is_dataclass": true
        },
        {
          "name": "IndicatorRelationship",
          "line_count": 78,
          "method_count": 1,
          "methods": [
            {
              "name": "validate_relationship",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 51,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "PerformanceMeasurement",
          "line_count": 147,
          "method_count": 4,
          "methods": [
            {
              "name": "calculate_composite_performance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "analyze_performance_variance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_performance_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_categorize_performance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "score"
              ],
              "return_annotation": "str",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "IndicatorSystem",
          "line_count": 177,
          "method_count": 3,
          "methods": [
            {
              "name": "assess_system_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 58,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "validate_system_coherence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_system_dashboard",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "statistics",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.SocialFabricIndicatorType",
        "models.sfm_enums.MeasurementApproach",
        "models.sfm_enums.EvidenceQuality",
        "models.sfm_enums.StatisticalMethod",
        "models.sfm_enums.ValidationMethod"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 28.527759999999997
    },
    {
      "filename": "sfm_cross_impact_analysis.py",
      "path": "/home/runner/work/beta/beta/models/sfm_cross_impact_analysis.py",
      "total_lines": 969,
      "class_count": 11,
      "function_count": 0,
      "classes": [
        {
          "name": "ImpactType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ImpactDirection",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ImpactTimeframe",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ImpactStrength",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "InteractionPattern",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "FeedbackType",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ImpactRelationship",
          "line_count": 160,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_impact_significance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 80,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "analyze_temporal_dynamics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "SystemInteraction",
          "line_count": 187,
          "method_count": 3,
          "methods": [
            {
              "name": "analyze_interaction_dynamics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 63,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "identify_intervention_opportunities",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "assess_system_resilience",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 51,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "FeedbackLoop",
          "line_count": 181,
          "method_count": 3,
          "methods": [
            {
              "name": "analyze_loop_dynamics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 70,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_management_priority",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "recommend_interventions",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "EmergentEffect",
          "line_count": 125,
          "method_count": 4,
          "methods": [
            {
              "name": "analyze_emergence_dynamics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_classify_emergence_type",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_assess_overall_significance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_policy_urgency",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "str",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CrossImpactAnalysis",
          "line_count": 221,
          "method_count": 5,
          "methods": [
            {
              "name": "conduct_comprehensive_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 63,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_system_complexity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_system_stability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "identify_system_leverage_points",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "generate_policy_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 45,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.EvidenceQuality",
        "models.sfm_enums.ValidationMethod"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 58.702020000000005
    },
    {
      "filename": "policy_framework.py",
      "path": "/home/runner/work/beta/beta/models/policy_framework.py",
      "total_lines": 80,
      "class_count": 3,
      "function_count": 0,
      "classes": [
        {
          "name": "PolicyInstrument",
          "line_count": 16,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueJudgment",
          "line_count": 13,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "ProblemSolvingSequence",
          "line_count": 21,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "models.base_nodes.Node",
        "models.sfm_enums.PolicyInstrumentType",
        "models.sfm_enums.ValueJudgmentType",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.ProblemSolvingStage",
        "models.sfm_enums.EnumValidator"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.0592
    },
    {
      "filename": "criteria_framework.py",
      "path": "/home/runner/work/beta/beta/models/criteria_framework.py",
      "total_lines": 886,
      "class_count": 8,
      "function_count": 0,
      "classes": [
        {
          "name": "CriteriaScope",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "CriteriaWeightingMethod",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "AggregationMethod",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "CriteriaValidityType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "EvaluationCriterion",
          "line_count": 203,
          "method_count": 8,
          "methods": [
            {
              "name": "calculate_performance_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 63,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "entity_id"
              ],
              "return_annotation": "Optional[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "validate_criterion_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 25,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_content_validity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "quality_issues"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_measurement_validity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_reliability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "quality_issues"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_practical_utility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_calculate_overall_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "validation_results"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_generate_quality_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "validation_results"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "CriteriaApplication",
          "line_count": 254,
          "method_count": 5,
          "methods": [
            {
              "name": "calculate_aggregated_scores",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "aggregation_method"
              ],
              "return_annotation": "Dict[uuid.UUID, float]",
              "decorators": []
            },
            {
              "name": "conduct_sensitivity_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 57,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_ranking_correlation",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "ranking1",
                "ranking2"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "validate_application_results",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 49,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_evaluation_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 49,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "MultiCriteriaAnalysis",
          "line_count": 184,
          "method_count": 7,
          "methods": [
            {
              "name": "conduct_multi_method_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 58,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_mock_topsis_ranking",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[uuid.UUID]",
              "decorators": []
            },
            {
              "name": "_mock_ahp_ranking",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[uuid.UUID]",
              "decorators": []
            },
            {
              "name": "_calculate_consensus_ranking",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 25,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "method_rankings"
              ],
              "return_annotation": "List[uuid.UUID]",
              "decorators": []
            },
            {
              "name": "_calculate_method_agreement",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "method_rankings"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_calculate_ranking_correlation",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "ranking1",
                "ranking2"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_identify_robust_alternatives",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 24,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "method_rankings"
              ],
              "return_annotation": "List[uuid.UUID]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "CriteriaFramework",
          "line_count": 160,
          "method_count": 3,
          "methods": [
            {
              "name": "assess_framework_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 44,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "validate_framework_coherence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_framework_dashboard",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "statistics",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.meta_entities.Scenario",
        "models.sfm_enums.CriteriaType",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.CriteriaPriority",
        "models.sfm_enums.MeasurementApproach",
        "models.sfm_enums.EvidenceQuality",
        "models.sfm_enums.ValidationMethod",
        "models.sfm_enums.SystemLevel"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 82.61064
    },
    {
      "filename": "network_analysis.py",
      "path": "/home/runner/work/beta/beta/models/network_analysis.py",
      "total_lines": 211,
      "class_count": 3,
      "function_count": 0,
      "classes": [
        {
          "name": "CrossImpactAnalysis",
          "line_count": 18,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliveryRelationship",
          "line_count": 87,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_delivery_performance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 54,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "MatrixDeliveryNetwork",
          "line_count": 81,
          "method_count": 1,
          "methods": [
            {
              "name": "analyze_network_performance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 51,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "models.base_nodes.Node",
        "models.sfm_enums.CrossImpactType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 0.7849200000000001
    },
    {
      "filename": "sfm_stakeholder_engagement.py",
      "path": "/home/runner/work/beta/beta/models/sfm_stakeholder_engagement.py",
      "total_lines": 679,
      "class_count": 11,
      "function_count": 0,
      "classes": [
        {
          "name": "EngagementStrategy",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "EngagementPhase",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "EngagementFrequency",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "RelationshipQuality",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CapacityGap",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "StakeholderProfile",
          "line_count": 91,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_engagement_readiness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "EngagementActivity",
          "line_count": 103,
          "method_count": 1,
          "methods": [
            {
              "name": "evaluate_activity_success",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 55,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "StakeholderEngagementPlan",
          "line_count": 156,
          "method_count": 2,
          "methods": [
            {
              "name": "develop_engagement_strategy",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_plan_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 58,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "StakeholderRelationshipManager",
          "line_count": 72,
          "method_count": 1,
          "methods": [
            {
              "name": "evaluate_relationship_portfolio",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "CapacityBuildingProgram",
          "line_count": 77,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_capacity_building_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "EngagementOutcomeAssessment",
          "line_count": 89,
          "method_count": 1,
          "methods": [
            {
              "name": "conduct_comprehensive_outcome_assessment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 53,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.sfm_enums.StakeholderType",
        "models.sfm_enums.ParticipationLevel",
        "models.sfm_enums.InfluenceStrategy",
        "models.sfm_enums.CommunicationChannel"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Natural Environment",
      "complexity_score": 10.103520000000001
    },
    {
      "filename": "sfm_policy_alternatives.py",
      "path": "/home/runner/work/beta/beta/models/sfm_policy_alternatives.py",
      "total_lines": 350,
      "class_count": 9,
      "function_count": 0,
      "classes": [
        {
          "name": "PolicyType",
          "line_count": 36,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "PolicyStatus",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ImpactDirection",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "PolicyCertainty",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "PolicyAlternative",
          "line_count": 63,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "AlternativeAnalysis",
          "line_count": 45,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "PolicyImpactAssessment",
          "line_count": 48,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "AlternativeComparison",
          "line_count": 43,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "PolicyRecommendation",
          "line_count": 44,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Set",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.ValidationMethod",
        "models.sfm_enums.EvidenceQuality",
        "models.sfm_enums.PolicyInstrumentType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.0
    },
    {
      "filename": "problem_solving_framework.py",
      "path": "/home/runner/work/beta/beta/models/problem_solving_framework.py",
      "total_lines": 783,
      "class_count": 9,
      "function_count": 0,
      "classes": [
        {
          "name": "ProblemComplexity",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "StakeholderRole",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "EvidenceType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ProblemDefinition",
          "line_count": 127,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_problem_characteristics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "identify_analysis_requirements",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 58,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "SystemBoundaryDetermination",
          "line_count": 76,
          "method_count": 2,
          "methods": [
            {
              "name": "evaluate_boundary_adequacy",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "boundary"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "recommend_boundary_adjustments",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 23,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "boundary"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionCriteriaIdentification",
          "line_count": 93,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_institution_relevance",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "institution_id",
                "problem_definition"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "validate_criteria_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "PolicyAlternativeEvaluation",
          "line_count": 129,
          "method_count": 2,
          "methods": [
            {
              "name": "evaluate_policy_alternative",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy_id",
                "criteria_weights"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "conduct_comparative_analysis",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 67,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "criteria_weights"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ImplementationPathway",
          "line_count": 113,
          "method_count": 2,
          "methods": [
            {
              "name": "develop_implementation_timeline",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_implementation_readiness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ProblemSolvingSequenceFramework",
          "line_count": 164,
          "method_count": 4,
          "methods": [
            {
              "name": "advance_to_next_stage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "_validate_stage_completion",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "stage"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "generate_process_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 53,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_generate_process_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 28,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.whole_system_organization.SystemBoundary",
        "models.sfm_enums.ProblemSolvingStage",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.InstitutionalScope"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 27.12312
    },
    {
      "filename": "delivery_systems.py",
      "path": "/home/runner/work/beta/beta/models/delivery_systems.py",
      "total_lines": 875,
      "class_count": 9,
      "function_count": 0,
      "classes": [
        {
          "name": "DeliveryStatus",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "BottleneckType",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "FlowDirection",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "DeliveryQuality",
          "line_count": 53,
          "method_count": 1,
          "methods": [
            {
              "name": "calculate_overall_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliveryQuantification",
          "line_count": 98,
          "method_count": 3,
          "methods": [
            {
              "name": "calculate_weighted_value",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "calculate_total_value",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Optional[float]]",
              "decorators": []
            },
            {
              "name": "assess_measurement_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliveryFlow",
          "line_count": 165,
          "method_count": 4,
          "methods": [
            {
              "name": "calculate_utilization_rate",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "calculate_performance_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "identify_performance_issues",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 60,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "predict_delivery_risk",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliveryBottleneck",
          "line_count": 143,
          "method_count": 3,
          "methods": [
            {
              "name": "calculate_bottleneck_impact",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 31,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "assess_resolution_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "generate_resolution_plan",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 55,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliveryNetwork",
          "line_count": 190,
          "method_count": 7,
          "methods": [
            {
              "name": "add_delivery_flow",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "delivery_flow"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "remove_delivery_flow",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "flow_id"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "calculate_network_metrics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_bottlenecks",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[DeliveryBottleneck]",
              "decorators": []
            },
            {
              "name": "find_critical_paths",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[List[uuid.UUID]]",
              "decorators": []
            },
            {
              "name": "_trace_dependency_path",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "flow_id",
                "visited"
              ],
              "return_annotation": "List[uuid.UUID]",
              "decorators": []
            },
            {
              "name": "analyze_network_resilience",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 54,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliveryAnalyzer",
          "line_count": 150,
          "method_count": 3,
          "methods": [
            {
              "name": "analyze_delivery_system",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 62,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "network"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_generate_system_recommendations",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "analysis",
                "network_metrics",
                "bottlenecks"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "compare_delivery_systems",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 44,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "network_ids"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "statistics",
        "math",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.sfm_enums.DeliveryQuantificationMethod",
        "models.sfm_enums.ResourceType",
        "models.sfm_enums.FlowType",
        "models.sfm_enums.SystemLevel"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 56.28
    },
    {
      "filename": "sfm_consensus_democracy.py",
      "path": "/home/runner/work/beta/beta/models/sfm_consensus_democracy.py",
      "total_lines": 622,
      "class_count": 9,
      "function_count": 0,
      "classes": [
        {
          "name": "ConsensusType",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "DeliberationQuality",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "ParticipationBarrier",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "MediationOutcome",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "ConsensusProcess",
          "line_count": 175,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_consensus_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 57,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "track_consensus_development",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 53,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliberationProcess",
          "line_count": 91,
          "method_count": 1,
          "methods": [
            {
              "name": "evaluate_deliberation_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "ParticipationFramework",
          "line_count": 93,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_participation_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 52,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "DemocraticDecisionMaking",
          "line_count": 83,
          "method_count": 1,
          "methods": [
            {
              "name": "evaluate_democratic_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "ConflictMediation",
          "line_count": 100,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_mediation_success",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 64,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.sfm_enums.StakeholderType",
        "models.sfm_enums.ParticipationLevel",
        "models.sfm_enums.DecisionMakingApproach",
        "models.sfm_enums.ConflictResolutionMethod"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 8.91948
    },
    {
      "filename": "normative_systems.py",
      "path": "/home/runner/work/beta/beta/models/normative_systems.py",
      "total_lines": 792,
      "class_count": 8,
      "function_count": 0,
      "classes": [
        {
          "name": "NormativeConflictType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "RuleStrength",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "LogicalOperator",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "NormativeCondition",
          "line_count": 45,
          "method_count": 1,
          "methods": [
            {
              "name": "evaluate",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "context"
              ],
              "return_annotation": "bool",
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "NormativeRule",
          "line_count": 114,
          "method_count": 4,
          "methods": [
            {
              "name": "is_applicable",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "context"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "get_deontic_status",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "action",
                "context"
              ],
              "return_annotation": "Optional[str]",
              "decorators": []
            },
            {
              "name": "calculate_rule_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "calculate_ceremonial_instrumental_balance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueJudgment",
          "line_count": 104,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_judgment_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_value_conflicts",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "other_judgments"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "NormativeSystem",
          "line_count": 339,
          "method_count": 16,
          "methods": [
            {
              "name": "add_rule",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "rule",
                "priority"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "add_value_judgment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "judgment"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "detect_rule_conflicts",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "_analyze_rule_conflict",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 38,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "rule1",
                "rule2"
              ],
              "return_annotation": "List[NormativeConflictType]",
              "decorators": []
            },
            {
              "name": "_calculate_conflict_severity",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "rule1",
                "rule2",
                "conflict_types"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "resolve_conflicts",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "conflicts"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "_determine_resolution_strategy",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 31,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "rule1",
                "rule2",
                "conflict"
              ],
              "return_annotation": "Optional[str]",
              "decorators": []
            },
            {
              "name": "_apply_resolution",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "rule1",
                "rule2",
                "strategy"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "_update_consistency_metrics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "evaluate_system_coherence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 25,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "generate_system_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_deontic_distribution",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, int]",
              "decorators": []
            },
            {
              "name": "_analyze_authority_distribution",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, int]",
              "decorators": []
            },
            {
              "name": "_analyze_strength_distribution",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, int]",
              "decorators": []
            },
            {
              "name": "_summarize_conflict_types",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "conflicts"
              ],
              "return_annotation": "Dict[str, int]",
              "decorators": []
            },
            {
              "name": "_calculate_average_judgment_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeontologicalAnalyzer",
          "line_count": 121,
          "method_count": 3,
          "methods": [
            {
              "name": "analyze_deontic_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "domain"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "trace_rule_derivations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 52,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "base_rule_id"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "analyze_enforcement_gaps",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.sfm_enums.DeontologicalCategory",
        "models.sfm_enums.ValueJudgmentType",
        "models.sfm_enums.NormativeFramework",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.InstitutionalScope",
        "models.sfm_enums.EnforcementType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 102.89664
    },
    {
      "filename": "advanced_data_validation.py",
      "path": "/home/runner/work/beta/beta/models/advanced_data_validation.py",
      "total_lines": 763,
      "class_count": 15,
      "function_count": 0,
      "classes": [
        {
          "name": "ValidationRuleType",
          "line_count": 15,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "DataCategory",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValidationContext",
          "line_count": 12,
          "method_count": 0,
          "methods": [],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValidationResult",
          "line_count": 16,
          "method_count": 0,
          "methods": [],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValidationRule",
          "line_count": 22,
          "method_count": 3,
          "methods": [
            {
              "name": "__init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "rule_name",
                "severity"
              ],
              "return_annotation": null,
              "decorators": []
            },
            {
              "name": "validate",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value",
                "context"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": [
                "abstractmethod"
              ]
            },
            {
              "name": "get_violation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "message"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "ABC"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "RequiredFieldRule",
          "line_count": 17,
          "method_count": 2,
          "methods": [
            {
              "name": "__init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "field_name",
                "severity"
              ],
              "return_annotation": null,
              "decorators": []
            },
            {
              "name": "validate",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value",
                "context"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "ValidationRule"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "TypeValidationRule",
          "line_count": 19,
          "method_count": 2,
          "methods": [
            {
              "name": "__init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 6,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "field_name",
                "expected_type",
                "severity"
              ],
              "return_annotation": null,
              "decorators": []
            },
            {
              "name": "validate",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value",
                "context"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "ValidationRule"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "RangeValidationRule",
          "line_count": 26,
          "method_count": 2,
          "methods": [
            {
              "name": "__init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "field_name",
                "min_value",
                "max_value",
                "severity"
              ],
              "return_annotation": null,
              "decorators": []
            },
            {
              "name": "validate",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value",
                "context"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "ValidationRule"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "PatternValidationRule",
          "line_count": 21,
          "method_count": 2,
          "methods": [
            {
              "name": "__init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "field_name",
                "pattern",
                "severity"
              ],
              "return_annotation": null,
              "decorators": []
            },
            {
              "name": "validate",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value",
                "context"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "ValidationRule"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ReferenceValidationRule",
          "line_count": 30,
          "method_count": 2,
          "methods": [
            {
              "name": "__init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 6,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "field_name",
                "reference_type",
                "severity"
              ],
              "return_annotation": null,
              "decorators": []
            },
            {
              "name": "validate",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value",
                "context"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "ValidationRule"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "StatisticalOutlierRule",
          "line_count": 31,
          "method_count": 2,
          "methods": [
            {
              "name": "__init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 6,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "field_name",
                "z_score_threshold",
                "severity"
              ],
              "return_annotation": null,
              "decorators": []
            },
            {
              "name": "validate",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value",
                "context"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "ValidationRule"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValidationSchema",
          "line_count": 109,
          "method_count": 4,
          "methods": [
            {
              "name": "add_rule",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "rule"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "add_required_field",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "field_name",
                "field_type"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "validate_data",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 57,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "data",
                "context"
              ],
              "return_annotation": "ValidationResult",
              "decorators": []
            },
            {
              "name": "_calculate_quality_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "violations"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "IntegrityChecker",
          "line_count": 69,
          "method_count": 4,
          "methods": [
            {
              "name": "register_entities",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "entity_type",
                "entity_ids"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "add_relationship_rule",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "source_type",
                "target_type",
                "relationship_type",
                "required"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "check_reference_integrity",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "entity_id",
                "entity_type",
                "references"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "check_relationship_integrity",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 27,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "relationships"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "DataQualityAnalyzer",
          "line_count": 173,
          "method_count": 9,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": null,
              "decorators": []
            },
            {
              "name": "analyze_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "data",
                "required_fields"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "analyze_accuracy",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "data",
                "validation_result"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "analyze_consistency",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "data",
                "historical_data"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "analyze_timeliness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "data",
                "timestamp_field"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "analyze_validity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "validation_result"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "calculate_overall_quality_score",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "data",
                "validation_result",
                "required_fields",
                "historical_data"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_get_quality_level",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "score"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_generate_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "dimension_scores"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "AdvancedDataValidator",
          "line_count": 137,
          "method_count": 5,
          "methods": [
            {
              "name": "register_schema",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "schema"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "register_entities_for_integrity_check",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 6,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "entity_type",
                "entity_ids"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "validate_record",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 38,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "data",
                "schema_name",
                "context"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "create_standard_schemas",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 52,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "get_validation_statistics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "re",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Type",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "abc.ABC",
        "abc.abstractmethod",
        "logging",
        "models.base_nodes.Node",
        "models.realtime_data_integration.ValidationRule",
        "models.realtime_data_integration.ValidationSeverity"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 50.48008
    },
    {
      "filename": "ceremonial_instrumental.py",
      "path": "/home/runner/work/beta/beta/models/ceremonial_instrumental.py",
      "total_lines": 1308,
      "class_count": 10,
      "function_count": 0,
      "classes": [
        {
          "name": "CeremonialType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Personal Attitudes",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": false
        },
        {
          "name": "InstrumentalType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Personal Attitudes",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": false
        },
        {
          "name": "DichotomyIndicator",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Personal Attitudes",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": false
        },
        {
          "name": "TransformationStage",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Personal Attitudes",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": false
        },
        {
          "name": "CeremonialInstrumentalAnalysis",
          "line_count": 607,
          "method_count": 29,
          "methods": [
            {
              "name": "calculate_dichotomy_balance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 13,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "assess_transformation_potential",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 28,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "identify_transformation_barriers",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "identify_transformation_enablers",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 22,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "conduct_systematic_ci_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "evaluate_ci_across_matrix_dimensions",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix_cell_data"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_identify_ceremonial_dominance_areas",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_identify_instrumental_strength_areas",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_calculate_ci_indicators",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_analyze_behavioral_patterns",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_institutional_characteristics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_analyze_change_drivers",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            },
            {
              "name": "_analyze_resistance_patterns",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_enabler_patterns",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_derive_policy_implications",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            },
            {
              "name": "_generate_institutional_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 28,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            },
            {
              "name": "_assess_pattern_coherence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_identify_resistance_sources",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_assess_resistance_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 13,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_categorize_enablers",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 24,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "enablers"
              ],
              "return_annotation": "Dict[str, int]",
              "decorators": []
            },
            {
              "name": "_assess_enabler_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "enablers"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_analyze_cell_ci_characteristics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "cell_data"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_analyze_delivery_dimension_ci",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix_cell_data"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_analyze_institutional_dimension_ci",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix_cell_data"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_analyze_temporal_dimension_ci",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix_cell_data"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_identify_ci_correlation_patterns",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix_cell_data"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_analyze_transformation_spillovers",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix_cell_data"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_systemic_ci_effects",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix_cell_data"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_calculate_variance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "scores"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Personal Attitudes",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        },
        {
          "name": "CeremonialBehaviorPattern",
          "line_count": 35,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Personal Attitudes",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstrumentalBehaviorPattern",
          "line_count": 40,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Personal Attitudes",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        },
        {
          "name": "DichotomyTransformation",
          "line_count": 44,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Personal Attitudes",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueConflictAnalysis",
          "line_count": 35,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Personal Attitudes",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        },
        {
          "name": "CIMeasurementFramework",
          "line_count": 466,
          "method_count": 15,
          "methods": [
            {
              "name": "conduct_comprehensive_ci_measurement",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "target_entity_id"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "develop_ci_measurement_scales",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 68,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "calculate_ci_composite_scores",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "evaluate_measurement_validity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "track_ci_change_over_time",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "time_series_data"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_measure_core_ci_indicators",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 24,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "target_entity_id"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_measure_dimensional_characteristics",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "target_entity_id"
              ],
              "return_annotation": "Dict[str, Dict[str, float]]",
              "decorators": []
            },
            {
              "name": "_measure_ci_change_patterns",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "target_entity_id"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_collect_stakeholder_ci_assessments",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "target_entity_id"
              ],
              "return_annotation": "Dict[str, Dict[str, float]]",
              "decorators": []
            },
            {
              "name": "_assess_measurement_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_collect_ceremonial_measurement",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "indicator",
                "target_id"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_collect_instrumental_measurement",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "indicator",
                "target_id"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_calculate_trend",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "values"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_change_magnitude",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_identify_significant_changes",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Personal Attitudes",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 491.86
    },
    {
      "filename": "social_beliefs_institutions.py",
      "path": "/home/runner/work/beta/beta/models/social_beliefs_institutions.py",
      "total_lines": 566,
      "class_count": 10,
      "function_count": 0,
      "classes": [
        {
          "name": "BeliefType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "InstitutionalAlignment",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "BeliefTransmissionMechanism",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "CulturalPersistence",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "BeliefConflictType",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "SocialBeliefSystem",
          "line_count": 135,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_institutional_support",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 38,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "analyze_belief_persistence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 50,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "BeliefInstitutionInteraction",
          "line_count": 70,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_interaction_impact",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CulturalTransmissionSystem",
          "line_count": 85,
          "method_count": 1,
          "methods": [
            {
              "name": "evaluate_transmission_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "BeliefSystemEvolution",
          "line_count": 78,
          "method_count": 1,
          "methods": [
            {
              "name": "analyze_change_dynamics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "SocialBeliefMatrixAnalyzer",
          "line_count": 116,
          "method_count": 4,
          "methods": [
            {
              "name": "add_belief_system",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "belief_system"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "add_belief_interaction",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "interaction"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "analyze_belief_landscape",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 48,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_belief_matrix_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Union",
        "typing.Tuple",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 10.94644
    },
    {
      "filename": "relationships.py",
      "path": "/home/runner/work/beta/beta/models/relationships.py",
      "total_lines": 40,
      "class_count": 1,
      "function_count": 0,
      "classes": [
        {
          "name": "Relationship",
          "line_count": 21,
          "method_count": 0,
          "methods": [],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.Optional",
        "datetime.datetime",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.meta_entities.Scenario",
        "models.metadata_models.TemporalDynamics",
        "models.sfm_enums.RelationshipKind"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 0.0
    },
    {
      "filename": "base_nodes.py",
      "path": "/home/runner/work/beta/beta/models/base_nodes.py",
      "total_lines": 34,
      "class_count": 1,
      "function_count": 0,
      "classes": [
        {
          "name": "Node",
          "line_count": 19,
          "method_count": 1,
          "methods": [
            {
              "name": "__iter__",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Iterator[Tuple[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "typing.Any",
        "typing.Dict",
        "typing.Iterator",
        "typing.Optional",
        "typing.Tuple"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 0.012920000000000001
    },
    {
      "filename": "sfm_criteria_classification.py",
      "path": "/home/runner/work/beta/beta/models/sfm_criteria_classification.py",
      "total_lines": 744,
      "class_count": 10,
      "function_count": 0,
      "classes": [
        {
          "name": "StandardCriteriaType",
          "line_count": 20,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "CriteriaScope",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "CriteriaMeasurementType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "CriteriaWeight",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "CriteriaRelationshipType",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "StandardizedCriteria",
          "line_count": 134,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_applicability",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 54,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "institution_type",
                "sector",
                "system_level"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "validate_measurement_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "CriteriaClassification",
          "line_count": 107,
          "method_count": 2,
          "methods": [
            {
              "name": "validate_classification_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_classification_consistency",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "CriteriaRelationship",
          "line_count": 122,
          "method_count": 2,
          "methods": [
            {
              "name": "analyze_trade_off_implications",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "validate_relationship_evidence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 48,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "CriteriaMapping",
          "line_count": 110,
          "method_count": 2,
          "methods": [
            {
              "name": "validate_mapping_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 53,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_mapping_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "CriteriaValidation",
          "line_count": 172,
          "method_count": 4,
          "methods": [
            {
              "name": "conduct_systematic_validation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 55,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_score_distribution",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, int]",
              "decorators": []
            },
            {
              "name": "generate_validation_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_extract_key_findings",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 25,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "detailed_results"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.ValidationMethod",
        "models.sfm_enums.EvidenceQuality"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 24.31392
    },
    {
      "filename": "cultural_context.py",
      "path": "/home/runner/work/beta/beta/models/cultural_context.py",
      "total_lines": 358,
      "class_count": 11,
      "function_count": 0,
      "classes": [
        {
          "name": "CulturalDimension",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValueOrientation",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "CulturalTransmissionType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "MeaningSystemType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "CulturalValueSystem",
          "line_count": 42,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "MeaningSystem",
          "line_count": 48,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CulturalNorm",
          "line_count": 37,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CulturalCapital",
          "line_count": 40,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CulturalInnovation",
          "line_count": 43,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        },
        {
          "name": "CulturalConflict",
          "line_count": 43,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CulturalBridge",
          "line_count": 31,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Union",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 0.0
    },
    {
      "filename": "specialized_components.py",
      "path": "/home/runner/work/beta/beta/models/specialized_components.py",
      "total_lines": 227,
      "class_count": 3,
      "function_count": 0,
      "classes": [
        {
          "name": "SocialIndicatorSystem",
          "line_count": 82,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_indicator_system_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 52,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "EvolutionaryPathway",
          "line_count": 60,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_evolutionary_potential",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "SocialProvisioningMatrix",
          "line_count": 60,
          "method_count": 1,
          "methods": [
            {
              "name": "analyze_provisioning_gaps",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 38,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "models.base_nodes.Node",
        "models.sfm_enums.EvolutionaryStage",
        "models.sfm_enums.NormativeFramework"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.91708
    },
    {
      "filename": "sfm_delivery_identification.py",
      "path": "/home/runner/work/beta/beta/models/sfm_delivery_identification.py",
      "total_lines": 916,
      "class_count": 10,
      "function_count": 0,
      "classes": [
        {
          "name": "DeliverySystemType",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "DeliveryScope",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "DeliveryMode",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "DeliveryEffectiveness",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "IdentificationMethod",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "DeliverySystemIdentification",
          "line_count": 205,
          "method_count": 3,
          "methods": [
            {
              "name": "conduct_systematic_identification",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 64,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "validate_identification_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 61,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_identification_map",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliveryClassification",
          "line_count": 187,
          "method_count": 7,
          "methods": [
            {
              "name": "apply_classification_framework",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "delivery_systems"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_classify_delivery_system",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "system_id"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "validate_classification_consistency",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_classification_guide",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_get_system_type_definitions",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, str]",
              "decorators": []
            },
            {
              "name": "_generate_classification_examples",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            },
            {
              "name": "_generate_usage_guidelines",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliverySystemMapping",
          "line_count": 168,
          "method_count": 3,
          "methods": [
            {
              "name": "analyze_delivery_network",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 53,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "identify_critical_delivery_paths",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 38,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "validate_relationship_mapping",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 44,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliveryCapacityAssessment",
          "line_count": 186,
          "method_count": 5,
          "methods": [
            {
              "name": "conduct_capacity_assessment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 50,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_assessment_coverage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_categorize_capacity_levels",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, int]",
              "decorators": []
            },
            {
              "name": "_analyze_resource_gaps",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 23,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "prioritize_capacity_building",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliverySystemValidation",
          "line_count": 74,
          "method_count": 1,
          "methods": [
            {
              "name": "conduct_systematic_validation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.meta_entities.Scenario",
        "models.sfm_enums.DeliveryMechanism",
        "models.sfm_enums.ResourceType",
        "models.sfm_enums.FlowType",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.InstitutionalScope",
        "models.sfm_enums.ValidationMethod",
        "models.sfm_enums.EvidenceQuality",
        "models.sfm_enums.ValueCategory"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Natural Environment",
      "complexity_score": 62.87424
    },
    {
      "filename": "sfm_value_validation.py",
      "path": "/home/runner/work/beta/beta/models/sfm_value_validation.py",
      "total_lines": 1006,
      "class_count": 11,
      "function_count": 0,
      "classes": [
        {
          "name": "ValueValidationType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "ConflictType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "ConflictIntensity",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "ResolutionStrategy",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValidationStatus",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValueAssessment",
          "line_count": 124,
          "method_count": 2,
          "methods": [
            {
              "name": "calculate_overall_validity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_contextual_appropriateness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "context"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueValidation",
          "line_count": 175,
          "method_count": 4,
          "methods": [
            {
              "name": "conduct_systematic_validation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 53,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "identify_validation_gaps",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_validation_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_extract_validation_findings",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "detailed_results"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueConflictAnalysis",
          "line_count": 219,
          "method_count": 5,
          "methods": [
            {
              "name": "conduct_conflict_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 59,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_identify_most_conflicted_values",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Tuple[str, int]]",
              "decorators": []
            },
            {
              "name": "_identify_conflict_clusters",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 22,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[List[str]]",
              "decorators": []
            },
            {
              "name": "_prioritize_conflicts_for_resolution",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "assess_conflict_resolvability",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 56,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "conflict_pair"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "ConflictResolution",
          "line_count": 187,
          "method_count": 3,
          "methods": [
            {
              "name": "implement_resolution_strategy",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 56,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "conflict_pair",
                "strategy"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_resolution_success",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 59,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_resolution_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueConsensusBuilding",
          "line_count": 117,
          "method_count": 2,
          "methods": [
            {
              "name": "facilitate_consensus_building",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_consensus_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueIntegration",
          "line_count": 91,
          "method_count": 3,
          "methods": [
            {
              "name": "execute_value_integration",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_mapping_density",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_calculate_overall_integration_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "statistics",
        "models.base_nodes.Node",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.ValidationMethod",
        "models.sfm_enums.EvidenceQuality",
        "models.sfm_enums.SystemLevel"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 62.22
    },
    {
      "filename": "cultural_analysis.py",
      "path": "/home/runner/work/beta/beta/models/cultural_analysis.py",
      "total_lines": 189,
      "class_count": 4,
      "function_count": 0,
      "classes": [
        {
          "name": "CeremonialInstrumentalClassification",
          "line_count": 13,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Personal Attitudes",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueSystem",
          "line_count": 45,
          "method_count": 2,
          "methods": [
            {
              "name": "calculate_coherence_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "assess_institutional_alignment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Personal Attitudes",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "SocialBelief",
          "line_count": 45,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_belief_stability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Personal Attitudes",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CulturalAttitude",
          "line_count": 56,
          "method_count": 1,
          "methods": [
            {
              "name": "analyze_mediation_capacity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Personal Attitudes",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "models.base_nodes.Node",
        "models.sfm_enums.CeremonialInstrumentalType",
        "models.sfm_enums.ValueSystemType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 0.7219800000000001
    },
    {
      "filename": "matrix_construction.py",
      "path": "/home/runner/work/beta/beta/models/matrix_construction.py",
      "total_lines": 758,
      "class_count": 8,
      "function_count": 0,
      "classes": [
        {
          "name": "DeliveryDirection",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "CellEvidence",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "MatrixDimension",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValidationStatus",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "DeliveryMatrix",
          "line_count": 139,
          "method_count": 3,
          "methods": [
            {
              "name": "calculate_matrix_metrics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 55,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_dominant_flows",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "threshold"
              ],
              "return_annotation": "List[Tuple[uuid.UUID, uuid.UUID, float]]",
              "decorators": []
            },
            {
              "name": "analyze_delivery_patterns",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 47,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "MatrixValidation",
          "line_count": 157,
          "method_count": 3,
          "methods": [
            {
              "name": "validate_matrix_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 51,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "validate_matrix_consistency",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 48,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "conduct_stakeholder_validation",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 31,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix",
                "stakeholders"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "SFMMatrixBuilder",
          "line_count": 311,
          "method_count": 9,
          "methods": [
            {
              "name": "initialize_matrix_construction",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "institutions",
                "criteria"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "populate_matrix_cells",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 49,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "data_sources"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "validate_matrix_construction",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 62,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_plan_data_collection",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 22,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "institutions",
                "criteria"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            },
            {
              "name": "_plan_validation_approach",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            },
            {
              "name": "_plan_stakeholder_engagement",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            },
            {
              "name": "_plan_quality_assurance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            },
            {
              "name": "_extract_cell_data",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "institution_id",
                "criteria_id",
                "data_sources"
              ],
              "return_annotation": "Optional[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "generate_construction_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "MatrixAnalyzer",
          "line_count": 69,
          "method_count": 2,
          "methods": [
            {
              "name": "analyze_delivery_patterns",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 23,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_institutional_role",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "institution_id",
                "matrix"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Set",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "statistics",
        "math",
        "models.base_nodes.Node",
        "models.specialized_nodes.MatrixCell",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.delivery_systems.DeliveryQuantification",
        "models.delivery_systems.DeliveryFlow",
        "models.sfm_enums.MatrixConstructionStage",
        "models.sfm_enums.DeliveryQuantificationMethod",
        "models.sfm_enums.InstitutionalScope",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.AnalyticalMethod"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 57.986999999999995
    },
    {
      "filename": "temporal_systems.py",
      "path": "/home/runner/work/beta/beta/models/temporal_systems.py",
      "total_lines": 639,
      "class_count": 9,
      "function_count": 0,
      "classes": [
        {
          "name": "SequenceStatus",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CoordinationType",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ConstraintType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "TemporalConstraint",
          "line_count": 76,
          "method_count": 2,
          "methods": [
            {
              "name": "is_satisfied",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "start_time",
                "end_time"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "calculate_violation_severity",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "start_time",
                "end_time"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "SequenceStageExecution",
          "line_count": 62,
          "method_count": 5,
          "methods": [
            {
              "name": "calculate_duration",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 5,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[timedelta]",
              "decorators": []
            },
            {
              "name": "calculate_delay",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[timedelta]",
              "decorators": []
            },
            {
              "name": "is_behind_schedule",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "start_stage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "complete_stage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "quality_score"
              ],
              "return_annotation": "None",
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "TemporalSequence",
          "line_count": 172,
          "method_count": 10,
          "methods": [
            {
              "name": "add_stage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "stage",
                "position"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "get_current_stage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[SequenceStageExecution]",
              "decorators": []
            },
            {
              "name": "get_next_stage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[SequenceStageExecution]",
              "decorators": []
            },
            {
              "name": "advance_to_next_stage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "_can_start_stage",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "stage"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "calculate_overall_progress",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "get_critical_path",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[uuid.UUID]",
              "decorators": []
            },
            {
              "name": "add_temporal_constraint",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "constraint"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "check_constraint_violations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Tuple[TemporalConstraint, float]]",
              "decorators": []
            },
            {
              "name": "estimate_completion_time",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[datetime]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "PolicySequence",
          "line_count": 55,
          "method_count": 1,
          "methods": [
            {
              "name": "initialize_policy_stages",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            }
          ],
          "base_classes": [
            "TemporalSequence"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "SequenceCoordinator",
          "line_count": 108,
          "method_count": 7,
          "methods": [
            {
              "name": "add_sequence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "sequence"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "add_coordination_rule",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "rule"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "coordinate_sequences",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_detect_conflicts",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 24,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_apply_coordination_rules",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_calculate_synchronization_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "get_coordination_status",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "CoordinationRule",
          "line_count": 94,
          "method_count": 4,
          "methods": [
            {
              "name": "apply_rule",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "sequences"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "_apply_sequential_rule",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 23,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "source_seq",
                "sequences"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "_apply_parallel_rule",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "source_seq",
                "sequences"
              ],
              "return_annotation": "bool",
              "decorators": []
            },
            {
              "name": "_apply_synchronized_rule",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "source_seq",
                "sequences"
              ],
              "return_annotation": "bool",
              "decorators": []
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.metadata_models.TemporalDynamics",
        "models.sfm_enums.SequenceStage",
        "models.sfm_enums.AdjustmentType",
        "models.sfm_enums.ProblemSolvingStage",
        "models.sfm_enums.PolicyInstrumentType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 43.055820000000004
    },
    {
      "filename": "policy_evaluation_framework.py",
      "path": "/home/runner/work/beta/beta/models/policy_evaluation_framework.py",
      "total_lines": 1132,
      "class_count": 8,
      "function_count": 0,
      "classes": [
        {
          "name": "PolicyImpactType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "PolicyMechanism",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "EvaluationCriteria",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "PolicyConsequenceType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "PolicyImpactAssessment",
          "line_count": 218,
          "method_count": 4,
          "methods": [
            {
              "name": "assess_direct_impacts",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 63,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "affected_institutions"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_indirect_impacts",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 47,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "delivery_matrix"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_systemic_impacts",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "system_context"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "calculate_net_impact_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliveryImpactAnalysis",
          "line_count": 280,
          "method_count": 12,
          "methods": [
            {
              "name": "analyze_delivery_flow_changes",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 50,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "current_matrix"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_network_efficiency_impacts",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "current_matrix"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_bottleneck_resolution_opportunities",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "current_bottlenecks"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_estimate_flow_impact",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "source_id",
                "target_id",
                "current_value"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_identify_enhancement_mechanism",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "source_id",
                "target_id"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_identify_diminishment_reason",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "source_id",
                "target_id"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_identify_potential_new_flows",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "current_matrix"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "_project_post_policy_metrics",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "current_matrix",
                "baseline_metrics"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_assess_bottleneck_resolution_potential",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "bottleneck_type",
                "affected_flows",
                "severity"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_identify_resolution_mechanism",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "bottleneck_type"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_identify_resolution_limitations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "bottleneck_type"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_identify_potential_new_bottlenecks",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "PolicyComparison",
          "line_count": 352,
          "method_count": 13,
          "methods": [
            {
              "name": "conduct_comprehensive_comparison",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 56,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policies",
                "delivery_matrices"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_evaluate_policy_against_criterion",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "criterion",
                "delivery_matrices"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_effectiveness",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "delivery_matrices"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_efficiency",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "delivery_matrices"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_equity",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 24,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "delivery_matrices"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_sustainability",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 28,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy",
                "delivery_matrices"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_acceptability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_coherence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_adaptability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_calculate_overall_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy_id"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_conduct_sensitivity_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 38,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_generate_comparison_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 24,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "PolicyEvaluationFramework",
          "line_count": 192,
          "method_count": 4,
          "methods": [
            {
              "name": "conduct_comprehensive_evaluation",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 74,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policies",
                "baseline_matrices",
                "evaluation_criteria"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_implementation_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policy"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_analyze_implementation_considerations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policies"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_generate_final_recommendations",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 27,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "policies",
                "evaluation_report"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Set",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "statistics",
        "math",
        "models.base_nodes.Node",
        "models.core_nodes.Policy",
        "models.core_nodes.Institution",
        "models.core_nodes.Actor",
        "models.delivery_systems.DeliveryQuantification",
        "models.delivery_systems.DeliveryFlow",
        "models.matrix_construction.MatrixCell",
        "models.matrix_construction.DeliveryMatrix",
        "models.problem_solving_framework.PolicyAlternativeEvaluation",
        "models.sfm_enums.PolicyType",
        "models.sfm_enums.PolicyScope",
        "models.sfm_enums.ImplementationComplexity",
        "models.sfm_enums.PolicyEffectiveness",
        "models.sfm_enums.EvaluationMethod",
        "models.sfm_enums.SystemLevel"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 191.52
    },
    {
      "filename": "social_value_systems.py",
      "path": "/home/runner/work/beta/beta/models/social_value_systems.py",
      "total_lines": 705,
      "class_count": 10,
      "function_count": 0,
      "classes": [
        {
          "name": "ValueMeasurementType",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValueValidationType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValueConflictIntensity",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValueIntegrationApproach",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValueDimension",
          "line_count": 97,
          "method_count": 2,
          "methods": [
            {
              "name": "calculate_ceremonial_instrumental_balance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "assess_value_realization",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueHierarchy",
          "line_count": 96,
          "method_count": 2,
          "methods": [
            {
              "name": "validate_hierarchy_consistency",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 38,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_decision_guidance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 31,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "decision_context"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueConflictAnalysis",
          "line_count": 132,
          "method_count": 2,
          "methods": [
            {
              "name": "analyze_conflict_dynamics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_resolution_plan",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 52,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueIntegration",
          "line_count": 72,
          "method_count": 1,
          "methods": [
            {
              "name": "synthesize_value_framework",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "SocialValueSystem",
          "line_count": 147,
          "method_count": 3,
          "methods": [
            {
              "name": "assess_system_coherence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 27,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "evaluate_institutional_alignment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_value_implementation_plan",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "SocialValueAssessment",
          "line_count": 77,
          "method_count": 2,
          "methods": [
            {
              "name": "conduct_comprehensive_assessment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_categorize_performance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "score"
              ],
              "return_annotation": "str",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.meta_entities.Scenario",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.ValueSystemType",
        "models.sfm_enums.SocialValueDimension",
        "models.sfm_enums.CeremonialInstrumentalType",
        "models.sfm_enums.NormativeFramework",
        "models.sfm_enums.ValueJudgmentType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 18.569699999999997
    },
    {
      "filename": "sfm_institution_criteria_quantification.py",
      "path": "/home/runner/work/beta/beta/models/sfm_institution_criteria_quantification.py",
      "total_lines": 920,
      "class_count": 11,
      "function_count": 0,
      "classes": [
        {
          "name": "SFMScoreValue",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "QuantificationMethod",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "ScoreConfidenceLevel",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValidationStatus",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "ConsensusLevel",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "ScoringEvidence",
          "line_count": 73,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_evidence_strength",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 45,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionCriteriaScore",
          "line_count": 158,
          "method_count": 3,
          "methods": [
            {
              "name": "calculate_numeric_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "int",
              "decorators": []
            },
            {
              "name": "assess_score_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 70,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "update_score",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "new_score",
                "rationale",
                "evidence_ids"
              ],
              "return_annotation": "None",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "QuantificationMethodology",
          "line_count": 141,
          "method_count": 2,
          "methods": [
            {
              "name": "validate_methodology_completeness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 64,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_methodology_guide",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "ScoreValidation",
          "line_count": 174,
          "method_count": 3,
          "methods": [
            {
              "name": "conduct_systematic_validation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 73,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_validation_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_extract_key_validation_findings",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 25,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "detailed_results"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "ConsensusBuilding",
          "line_count": 159,
          "method_count": 4,
          "methods": [
            {
              "name": "conduct_consensus_round",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "round_number"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_score_consensus",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "score_id"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "resolve_disagreements",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "score_id"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_consensus_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "QuantificationAudit",
          "line_count": 120,
          "method_count": 2,
          "methods": [
            {
              "name": "conduct_comprehensive_audit",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 47,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "track_improvement_implementation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "statistics",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.meta_entities.Scenario",
        "models.sfm_enums.ValidationMethod",
        "models.sfm_enums.EvidenceQuality",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.InstitutionalScope",
        "models.sfm_enums.CriteriaType",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.StatisticalMethod"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 40.976800000000004
    },
    {
      "filename": "conflict_resolution.py",
      "path": "/home/runner/work/beta/beta/models/conflict_resolution.py",
      "total_lines": 380,
      "class_count": 13,
      "function_count": 0,
      "classes": [
        {
          "name": "ConflictType",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ConflictIntensity",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ResolutionMechanism",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "MediationStyle",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ConflictOutcome",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "Conflict",
          "line_count": 44,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ConflictAnalysis",
          "line_count": 40,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ResolutionProcess",
          "line_count": 45,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "Mediation",
          "line_count": 25,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 2,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": null,
              "decorators": []
            }
          ],
          "base_classes": [
            "ResolutionProcess"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CollaborativeProblemSolving",
          "line_count": 27,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 2,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": null,
              "decorators": []
            }
          ],
          "base_classes": [
            "ResolutionProcess"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ConflictPreventionSystem",
          "line_count": 37,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ConflictTransformation",
          "line_count": 36,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "DisputeResolutionInstitution",
          "line_count": 38,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Union",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.39520000000000005
    },
    {
      "filename": "sfm_standardized_criteria.py",
      "path": "/home/runner/work/beta/beta/models/sfm_standardized_criteria.py",
      "total_lines": 265,
      "class_count": 8,
      "function_count": 0,
      "classes": [
        {
          "name": "HaydenCriteriaCategory",
          "line_count": 22,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "CriteriaImportanceLevel",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "CriteriaMeasurementDimension",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": false
        },
        {
          "name": "HaydenStandardCriteria",
          "line_count": 47,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "CriteriaTaxonomy",
          "line_count": 30,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "CriteriaSpecification",
          "line_count": 39,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "CriteriaWeighting",
          "line_count": 31,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "CriteriaValidation",
          "line_count": 36,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Set",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.ValidationMethod",
        "models.sfm_enums.EvidenceQuality"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 0.0
    },
    {
      "filename": "social_provisioning.py",
      "path": "/home/runner/work/beta/beta/models/social_provisioning.py",
      "total_lines": 651,
      "class_count": 9,
      "function_count": 0,
      "classes": [
        {
          "name": "ProvisioningType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ProvisioningMode",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ProvisioningQuality",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CoordinationMechanism",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ProvisioningNeed",
          "line_count": 72,
          "method_count": 2,
          "methods": [
            {
              "name": "calculate_provisioning_gap",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[float]",
              "decorators": []
            },
            {
              "name": "assess_need_priority",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 27,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "ProvisioningStageImplementation",
          "line_count": 87,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_stage_performance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 49,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "ProvisioningProcess",
          "line_count": 184,
          "method_count": 3,
          "methods": [
            {
              "name": "assess_process_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 47,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "analyze_process_bottlenecks",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_improvement_plan",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 49,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "ProvisioningNetwork",
          "line_count": 121,
          "method_count": 2,
          "methods": [
            {
              "name": "analyze_network_performance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 44,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_network_resilience",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 44,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "ProvisioningEffectiveness",
          "line_count": 103,
          "method_count": 2,
          "methods": [
            {
              "name": "calculate_overall_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "generate_effectiveness_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Natural Environment"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.meta_entities.Scenario",
        "models.sfm_enums.ProvisioningStage",
        "models.sfm_enums.ValueCategory",
        "models.sfm_enums.ResourceType",
        "models.sfm_enums.FlowType",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.InstitutionalScope",
        "models.sfm_enums.DeliveryQuantificationMethod"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Natural Environment",
      "complexity_score": 16.02762
    },
    {
      "filename": "sfm_matrix_quality_assurance.py",
      "path": "/home/runner/work/beta/beta/models/sfm_matrix_quality_assurance.py",
      "total_lines": 967,
      "class_count": 11,
      "function_count": 0,
      "classes": [
        {
          "name": "QualityDimension",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "QualityLevel",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "QualityAssuranceProcess",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "AuditType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "NonConformanceLevel",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": false
        },
        {
          "name": "QualityStandard",
          "line_count": 122,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_compliance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 62,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "assessment_data"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_implementation_guide",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 22,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "QualityAssessment",
          "line_count": 173,
          "method_count": 3,
          "methods": [
            {
              "name": "conduct_comprehensive_assessment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 54,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_prioritize_improvements",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "generate_quality_dashboard",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 47,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "QualityControl",
          "line_count": 139,
          "method_count": 4,
          "methods": [
            {
              "name": "implement_quality_controls",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 47,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_identify_coverage_gaps",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_identify_effectiveness_gaps",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "monitor_control_performance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 22,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "QualityAudit",
          "line_count": 129,
          "method_count": 3,
          "methods": [
            {
              "name": "conduct_quality_audit",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_determine_audit_rating",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "compliance_rate"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "generate_audit_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "ContinuousImprovement",
          "line_count": 136,
          "method_count": 3,
          "methods": [
            {
              "name": "execute_improvement_cycle",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_improvement_performance",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_improvement_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "MatrixQualityAssurance",
          "line_count": 174,
          "method_count": 4,
          "methods": [
            {
              "name": "assess_qa_framework_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 47,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_benchmark_achievement",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 31,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_performance_trends",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, str]",
              "decorators": []
            },
            {
              "name": "generate_qa_dashboard",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "statistics",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.meta_entities.Scenario",
        "models.sfm_enums.ValidationMethod",
        "models.sfm_enums.EvidenceQuality",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.StatisticalMethod",
        "models.sfm_enums.ValueCategory"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 54.3454
    },
    {
      "filename": "system_analysis.py",
      "path": "/home/runner/work/beta/beta/models/system_analysis.py",
      "total_lines": 123,
      "class_count": 3,
      "function_count": 0,
      "classes": [
        {
          "name": "SystemProperty",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "SystemLevelAnalysis",
          "line_count": 30,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionalHolarchy",
          "line_count": 52,
          "method_count": 2,
          "methods": [
            {
              "name": "calculate_system_coherence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "identify_leverage_points",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 13,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[InstitutionalLevel]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "models.base_nodes.Node",
        "models.sfm_enums.SystemPropertyType",
        "models.sfm_enums.SystemArchetype",
        "models.sfm_enums.InstitutionalLevel"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.32964
    },
    {
      "filename": "sfm_institutional_memory.py",
      "path": "/home/runner/work/beta/beta/models/sfm_institutional_memory.py",
      "total_lines": 675,
      "class_count": 11,
      "function_count": 0,
      "classes": [
        {
          "name": "MemoryType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "KnowledgeCategory",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "LearningLevel",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "KnowledgeQuality",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "TransferMechanism",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "KnowledgeAsset",
          "line_count": 100,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_knowledge_value",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 36,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_map_quality_to_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "quality"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "KnowledgeRepository",
          "line_count": 84,
          "method_count": 1,
          "methods": [
            {
              "name": "evaluate_repository_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "LearningSystem",
          "line_count": 106,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_learning_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 60,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "KnowledgeTransfer",
          "line_count": 95,
          "method_count": 1,
          "methods": [
            {
              "name": "evaluate_transfer_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 54,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionalMemory",
          "line_count": 101,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_institutional_memory_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 55,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionalLearningAssessment",
          "line_count": 96,
          "method_count": 1,
          "methods": [
            {
              "name": "conduct_comprehensive_learning_assessment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 60,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.sfm_enums.InstitutionalScope",
        "models.sfm_enums.KnowledgeType",
        "models.sfm_enums.LearningMethod",
        "models.sfm_enums.InformationSystem"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 9.207
    },
    {
      "filename": "methodological_framework.py",
      "path": "/home/runner/work/beta/beta/models/methodological_framework.py",
      "total_lines": 437,
      "class_count": 4,
      "function_count": 0,
      "classes": [
        {
          "name": "InstrumentalistInquiryFramework",
          "line_count": 84,
          "method_count": 1,
          "methods": [
            {
              "name": "assess_inquiry_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 59,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        },
        {
          "name": "NormativeSystemsAnalysis",
          "line_count": 118,
          "method_count": 6,
          "methods": [
            {
              "name": "conduct_normative_evaluation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_overall_system_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_value_alignment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 23,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_identify_policy_priorities",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 6,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_calculate_stakeholder_consensus",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_generate_normative_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "evaluation_results"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        },
        {
          "name": "PolicyRelevanceIntegration",
          "line_count": 119,
          "method_count": 6,
          "methods": [
            {
              "name": "assess_policy_integration_capacity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_integration_capacity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_political_viability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_assess_implementation_readiness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_assess_stakeholder_alignment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_generate_strategic_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        },
        {
          "name": "DatabaseIntegrationCapability",
          "line_count": 89,
          "method_count": 1,
          "methods": [
            {
              "name": "evaluate_database_capability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 59,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "models.base_nodes.Node",
        "models.sfm_enums.NormativeFramework"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 13.9403
    },
    {
      "filename": "democratic_systems.py",
      "path": "/home/runner/work/beta/beta/models/democratic_systems.py",
      "total_lines": 271,
      "class_count": 11,
      "function_count": 0,
      "classes": [
        {
          "name": "ParticipationLevel",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "DemocraticProcessType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "StakeholderRole",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "DemocraticProcess",
          "line_count": 26,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CitizenEngagement",
          "line_count": 22,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "StakeholderConsultation",
          "line_count": 22,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ParticipatorBudgeting",
          "line_count": 26,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "DeliberativeProcess",
          "line_count": 28,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "GovernanceNetwork",
          "line_count": 27,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "DemocraticLegitimacy",
          "line_count": 26,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "CivicCapacity",
          "line_count": 27,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.sfm_enums.DecisionMakingType",
        "models.sfm_enums.GovernanceMechanism"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.0
    },
    {
      "filename": "transactional_analysis.py",
      "path": "/home/runner/work/beta/beta/models/transactional_analysis.py",
      "total_lines": 321,
      "class_count": 12,
      "function_count": 0,
      "classes": [
        {
          "name": "TransactionType",
          "line_count": 6,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "PowerRelationType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "AuthorityType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "TransactionOutcome",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "Transaction",
          "line_count": 39,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "BargainingTransaction",
          "line_count": 25,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 2,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": null,
              "decorators": []
            }
          ],
          "base_classes": [
            "Transaction"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ManagerialTransaction",
          "line_count": 31,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 2,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": null,
              "decorators": []
            }
          ],
          "base_classes": [
            "Transaction"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "RationingTransaction",
          "line_count": 32,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "implemented",
              "has_docstring": false,
              "line_count": 2,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": null,
              "decorators": []
            }
          ],
          "base_classes": [
            "Transaction"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "TransactionCosts",
          "line_count": 28,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstitutionalContract",
          "line_count": 31,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "TransactionalRegime",
          "line_count": 27,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "PropertyRights",
          "line_count": 33,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Union",
        "datetime.datetime",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.sfm_enums.InstitutionalScope"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 0.56496
    },
    {
      "filename": "specialized_nodes.py",
      "path": "/home/runner/work/beta/beta/models/specialized_nodes.py",
      "total_lines": 106,
      "class_count": 0,
      "function_count": 0,
      "classes": [],
      "imports": [
        "__future__.annotations",
        "models.matrix_components.MatrixCell",
        "models.matrix_components.SFMCriteria",
        "models.matrix_components.SFMMatrix",
        "models.system_analysis.SystemProperty",
        "models.system_analysis.SystemLevelAnalysis",
        "models.system_analysis.InstitutionalHolarchy",
        "models.policy_framework.PolicyInstrument",
        "models.policy_framework.ValueJudgment",
        "models.policy_framework.ProblemSolvingSequence",
        "models.institutional_analysis.InstitutionalStructure",
        "models.institutional_analysis.PathDependencyAnalysis",
        "models.economic_analysis.TransactionCost",
        "models.economic_analysis.CoordinationMechanism",
        "models.economic_analysis.CommonsGovernance",
        "models.cultural_analysis.CeremonialInstrumentalClassification",
        "models.cultural_analysis.ValueSystem",
        "models.cultural_analysis.SocialBelief",
        "models.cultural_analysis.CulturalAttitude",
        "models.social_assessment.SocialValueAssessment",
        "models.social_assessment.SocialFabricIndicator",
        "models.social_assessment.SocialCost",
        "models.technology_integration.ToolSkillTechnologyComplex",
        "models.technology_integration.EcologicalSystem",
        "models.network_analysis.CrossImpactAnalysis",
        "models.network_analysis.DeliveryRelationship",
        "models.network_analysis.MatrixDeliveryNetwork",
        "models.complex_analysis.DigraphAnalysis",
        "models.complex_analysis.CircularCausationProcess",
        "models.complex_analysis.ConflictDetection",
        "models.methodological_framework.InstrumentalistInquiryFramework",
        "models.methodological_framework.NormativeSystemsAnalysis",
        "models.methodological_framework.PolicyRelevanceIntegration",
        "models.methodological_framework.DatabaseIntegrationCapability",
        "models.specialized_components.SocialIndicatorSystem",
        "models.specialized_components.EvolutionaryPathway",
        "models.specialized_components.SocialProvisioningMatrix"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Mixed SFM Components",
      "complexity_score": 0.0
    },
    {
      "filename": "sfm_enums.py",
      "path": "/home/runner/work/beta/beta/models/sfm_enums.py",
      "total_lines": 4064,
      "class_count": 85,
      "function_count": 3,
      "classes": [
        {
          "name": "ValueCategory",
          "line_count": 175,
          "method_count": 2,
          "methods": [
            {
              "name": "get_core_categories",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "cls"
              ],
              "return_annotation": "Set['ValueCategory']",
              "decorators": [
                "classmethod"
              ]
            },
            {
              "name": "get_extended_categories",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "cls"
              ],
              "return_annotation": "Set['ValueCategory']",
              "decorators": [
                "classmethod"
              ]
            }
          ],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "InstitutionLayer",
          "line_count": 156,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ResourceType",
          "line_count": 231,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "FlowNature",
          "line_count": 276,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "FlowType",
          "line_count": 63,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "PolicyInstrumentType",
          "line_count": 151,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ChangeType",
          "line_count": 207,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "BehaviorPatternType",
          "line_count": 52,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "FeedbackPolarity",
          "line_count": 28,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "FeedbackType",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "TemporalFunctionType",
          "line_count": 13,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValidationRuleType",
          "line_count": 13,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "SystemPropertyType",
          "line_count": 46,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "RelationshipKind",
          "line_count": 510,
          "method_count": 1,
          "methods": [
            {
              "name": "ceremonial_tendency",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 81,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": [
                "property"
              ]
            }
          ],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "PowerResourceType",
          "line_count": 13,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ToolSkillTechnologyType",
          "line_count": 18,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "PathDependencyType",
          "line_count": 12,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "InstitutionalChangeType",
          "line_count": 17,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "TechnologyReadinessLevel",
          "line_count": 22,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "LegitimacySource",
          "line_count": 18,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CorrelationType",
          "line_count": 6,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "EvidenceQuality",
          "line_count": 6,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CriteriaType",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "MeasurementApproach",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CeremonialInstrumentalType",
          "line_count": 6,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValueJudgmentType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "DigraphNodeType",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ProblemSolvingStage",
          "line_count": 18,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "InstitutionalScope",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "GovernanceMechanism",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CrossImpactType",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "EnforcementType",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "DecisionMakingType",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "TransactionCostType",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CoordinationMechanismType",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CoordinationScope",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CommonsGovernanceType",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "SocialValueDimension",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "SystemArchetype",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValueSystemType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "SocialFabricIndicatorType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "SocialCostType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "InstitutionalLevel",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "NormativeFramework",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "EvolutionaryStage",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "DependencyStrength",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CriteriaPriority",
          "line_count": 6,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CorrelationScale",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "BoundaryType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ProvisioningStage",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ConflictType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "DigraphAnalysisType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "NetworkMetricType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "SequenceStage",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "IndicatorType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "DeontologicalCategory",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "StatisticalMethod",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "AdjustmentType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "SystemBoundaryType",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "DeliveryQuantificationMethod",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "AdjustmentTrigger",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "MatrixOperationType",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "SystemLevel",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "PolicyType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "PolicyScope",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ImplementationComplexity",
          "line_count": 6,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "PolicyEffectiveness",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "EvaluationMethod",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "TechnologyMaturityLevel",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "SkillLevel",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "KnowledgeType",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValidationMethod",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "AnalyticalMethod",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "MatrixConstructionStage",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "StakeholderType",
          "line_count": 23,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ParticipationLevel",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "DecisionMakingApproach",
          "line_count": 13,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "ConflictResolutionMethod",
          "line_count": 13,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "CommunicationChannel",
          "line_count": 23,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "LearningMethod",
          "line_count": 23,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "InformationSystem",
          "line_count": 23,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "SFMEnumError",
          "line_count": 2,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Exception"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "IncompatibleEnumError",
          "line_count": 2,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "SFMEnumError"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "InvalidEnumOperationError",
          "line_count": 2,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "SFMEnumError"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "EnumValidator",
          "line_count": 1112,
          "method_count": 25,
          "methods": [
            {
              "name": "validate_relationship_context",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "kind",
                "source_type",
                "target_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "validate_flow_combination",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "nature",
                "flow_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "validate_institution_layer_context",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 23,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "layer",
                "institution_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "validate_policy_instrument_combination",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "instrument_type",
                "target_context"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "validate_value_category_context",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "category",
                "measurement_context"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "validate_cross_enum_dependency",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 42,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "primary_enum",
                "dependent_enum",
                "relationship_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "validate_required_enum_context",
              "implementation_status": "unimplemented",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "enum_value",
                "context",
                "is_required"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "validate_technology_readiness_level",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "level",
                "context"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "validate_legitimacy_source_context",
              "implementation_status": "unimplemented",
              "has_docstring": true,
              "line_count": 48,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "source",
                "institutional_context"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_generate_suggestions",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 50,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "kind",
                "source_type",
                "target_type"
              ],
              "return_annotation": "str",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_generate_semantic_suggestions",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 66,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "kind",
                "source_type",
                "target_type"
              ],
              "return_annotation": "List[str]",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_generate_business_logic_suggestions",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 45,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "kind",
                "source_type",
                "target_type"
              ],
              "return_annotation": "List[str]",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_generate_entity_compatibility_suggestions",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "source_type",
                "target_type"
              ],
              "return_annotation": "List[str]",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_get_entity_category",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 13,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "entity_type"
              ],
              "return_annotation": "str",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "validate_cross_entity_consistency",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "entity_1_type",
                "entity_2_type",
                "relationship_kind",
                "context"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_validate_authority_consistency",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "relationship_kind",
                "entity_1_type",
                "entity_2_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_validate_economic_consistency",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "relationship_kind",
                "entity_1_type",
                "entity_2_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_validate_context_specific_consistency",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "relationship_kind",
                "entity_1_type",
                "entity_2_type",
                "context"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_validate_temporal_consistency",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "relationship_kind",
                "entity_1_type",
                "entity_2_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_validate_spatial_consistency",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "relationship_kind",
                "entity_1_type",
                "entity_2_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "validate_business_rule_constraints",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "relationship_kind",
                "source_type",
                "target_type",
                "domain_context"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_validate_environmental_constraints",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 22,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "relationship_kind",
                "source_type",
                "target_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_validate_economic_constraints",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 28,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "relationship_kind",
                "source_type",
                "target_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_validate_social_constraints",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "relationship_kind",
                "source_type",
                "target_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            },
            {
              "name": "_validate_institutional_constraints",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "relationship_kind",
                "source_type",
                "target_type"
              ],
              "return_annotation": "None",
              "decorators": [
                "staticmethod"
              ]
            }
          ],
          "base_classes": [],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Beliefs",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        }
      ],
      "imports": [
        "__future__.annotations",
        "enum.Enum",
        "enum.auto",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Tuple",
        "typing.Type",
        "typing.Callable",
        "typing.Any",
        "typing.Union"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Social Institutions",
      "complexity_score": 576.2
    },
    {
      "filename": "tool_skill_technology.py",
      "path": "/home/runner/work/beta/beta/models/tool_skill_technology.py",
      "total_lines": 2410,
      "class_count": 12,
      "function_count": 0,
      "classes": [
        {
          "name": "TSTIntegrationLevel",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "SkillType",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "TechnologyDiffusionStage",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "TST_Compatibility",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": false
        },
        {
          "name": "TechnologicalCapability",
          "line_count": 132,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_technology_readiness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_improvement_opportunities",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 52,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "SkillRequirement",
          "line_count": 114,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_skill_development_needs",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 49,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "calculate_skill_criticality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "tst_context"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "ToolSystem",
          "line_count": 126,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_tool_system_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_optimization_opportunities",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 51,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "TechnologyTransition",
          "line_count": 141,
          "method_count": 2,
          "methods": [
            {
              "name": "assess_transition_feasibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 53,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "develop_transition_plan",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 54,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "TST_Integration",
          "line_count": 97,
          "method_count": 3,
          "methods": [
            {
              "name": "analyze_integration_opportunities",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "tst_complexes"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_tst_compatibility",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 25,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "complex1",
                "complex2"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_identify_synergy_type",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "complex1",
                "complex2"
              ],
              "return_annotation": "str",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "ToolSkillTechnologyComplex",
          "line_count": 818,
          "method_count": 24,
          "methods": [
            {
              "name": "assess_complex_integration",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "analyze_complex_capabilities",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 48,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_complex_optimization_plan",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_ceremonial_instrumental_characteristics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 73,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "assess_matrix_integration_level",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "identify_matrix_optimization_opportunities",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 53,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "conduct_comprehensive_ci_technology_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 72,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_technology_ceremonial_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 27,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_calculate_technology_instrumental_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_identify_technology_ceremonial_indicators",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_identify_technology_instrumental_indicators",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "analyze_technology_diffusion_patterns",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 60,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_classify_technology_orientation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "systematic_results"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_analyze_status_preservation_in_technology",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_identify_ritual_compliance_in_technology",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_hierarchy_reinforcement",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_change_resistance_factors",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_problem_solving_capabilities",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_efficiency_enhancements",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_adaptive_learning",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_innovation_potential",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_matrix_ci_integration",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_institutional_encapsulation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_generate_technology_transformation_recommendations",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 68,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "systematic_results"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "TechnologyDiffusionModel",
          "line_count": 463,
          "method_count": 36,
          "methods": [
            {
              "name": "conduct_comprehensive_diffusion_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 13,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_current_diffusion_status",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_adopter_segments",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_project_diffusion_trajectory",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_ci_diffusion_dynamics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_institutional_diffusion_factors",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_recommend_diffusion_interventions",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 56,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "_assess_diffusion_success_probability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 30,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_calculate_stage_duration",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "int",
              "decorators": []
            },
            {
              "name": "_calculate_current_adoption_rate",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 5,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_estimate_market_penetration",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_stage_completion",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, bool]",
              "decorators": []
            },
            {
              "name": "_assess_next_stage_readiness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 5,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_project_future_stages",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "_project_adoption_timeline",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, str]",
              "decorators": []
            },
            {
              "name": "_identify_critical_events",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_conduct_diffusion_scenarios",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 19,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "_calculate_trajectory_success_probability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_analyze_status_driven_adoption",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_legitimacy_seeking_adoption",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_compliance_driven_adoption",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_efficiency_driven_adoption",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_problem_solving_adoption",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_innovation_driven_adoption",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_identify_ci_tensions_in_diffusion",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_suggest_ci_tension_resolutions",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_optimize_ci_balance_for_diffusion",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 7,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_ecosystem_dependency_fulfillment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 6,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_network_effect_activation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 5,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_get_stage_requirements",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "stage"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_assess_technology_readiness_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_market_readiness_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_institutional_support_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 5,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_competitive_position_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_resource_availability_score",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_suggest_success_enhancements",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 18,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "success_factors"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "MatrixTechnologyIntegration",
          "line_count": 429,
          "method_count": 23,
          "methods": [
            {
              "name": "conduct_comprehensive_matrix_technology_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 13,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_matrix_impacts",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 48,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_delivery_system_integration",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_institutional_technology_coordination",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_analyze_cross_matrix_effects",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 43,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_identify_matrix_optimization_opportunities",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 50,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            },
            {
              "name": "_assess_integration_success_factors",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 27,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_assess_transformation_potential",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_cell_coordination_requirements",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "cell_id"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_assess_modification_complexity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "modification"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_identify_modification_benefits",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "modification"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_estimate_modification_resources",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "modification"
              ],
              "return_annotation": "Dict[str, str]",
              "decorators": []
            },
            {
              "name": "_estimate_adaptation_timeline",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "requirements"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_assess_technology_integration_readiness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_institutional_alignment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_matrix_compatibility",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_resource_adequacy",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_stakeholder_support",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 3,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_transformation_scope",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_estimate_transformation_timeline",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_identify_transformation_barriers",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_identify_transformation_enablers",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_calculate_transformation_success_probability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Technology",
            "Natural Environment"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Set",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "statistics",
        "math",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.sfm_enums.ToolSkillTechnologyType",
        "models.sfm_enums.TechnologyMaturityLevel",
        "models.sfm_enums.SkillLevel",
        "models.sfm_enums.SystemLevel",
        "models.sfm_enums.ChangeType",
        "models.ceremonial_instrumental.CeremonialInstrumentalAnalysis",
        "models.ceremonial_instrumental.CIMeasurementFramework"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Technology",
      "complexity_score": 949.68
    },
    {
      "filename": "instrumentalist_inquiry.py",
      "path": "/home/runner/work/beta/beta/models/instrumentalist_inquiry.py",
      "total_lines": 1669,
      "class_count": 10,
      "function_count": 0,
      "classes": [
        {
          "name": "InquiryType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "InquiryStage",
          "line_count": 10,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "KnowledgeStatus",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ValueConflictType",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ContextualFactor",
          "line_count": 9,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Enum"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": false
        },
        {
          "name": "ProblemOrientedInquiry",
          "line_count": 444,
          "method_count": 14,
          "methods": [
            {
              "name": "formulate_working_hypothesis",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 24,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "hypothesis_statement",
                "rationale",
                "evidence_base"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "test_hypothesis",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "hypothesis_id",
                "test_method",
                "test_results"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "synthesize_knowledge",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "conduct_practical_experiment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 49,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "experiment_design"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "analyze_problem_patterns",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 53,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "develop_adaptive_strategies",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 45,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "enhance_problem_definition",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 45,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "additional_perspectives"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_effectiveness_trend",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "effectiveness_scores"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_assess_priority_conflicts",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "stakeholder_priorities"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_assess_test_outcome",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 13,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "test_results"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "_discard_hypothesis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "hypothesis_id",
                "reason"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "_identify_remaining_questions",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "hypothesis"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_assess_knowledge_reliability",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 23,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_derive_practical_implications",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueInquiry",
          "line_count": 180,
          "method_count": 4,
          "methods": [
            {
              "name": "identify_stakeholder_values",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 29,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "stakeholder_id",
                "value_elicitation_method"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "analyze_value_conflicts",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "develop_value_integration_strategy",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 45,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_identify_pairwise_value_conflicts",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "stakeholder1",
                "stakeholder2"
              ],
              "return_annotation": "List[Dict[str, Any]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "KnowledgeValidation",
          "line_count": 203,
          "method_count": 5,
          "methods": [
            {
              "name": "conduct_pragmatic_validation",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "practical_applications"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "conduct_coherence_validation",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "knowledge_claim",
                "related_knowledge"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "conduct_consensus_validation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 37,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "expert_opinions"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "conduct_empirical_validation",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "empirical_evidence"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "calculate_overall_validation_confidence",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 23,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "ContextualAnalysis",
          "line_count": 136,
          "method_count": 3,
          "methods": [
            {
              "name": "analyze_cultural_context",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 39,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "cultural_indicators"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "analyze_historical_context",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 32,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "historical_data"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_context_effects_on_inquiry",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 47,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstrumentalistInquiryFramework",
          "line_count": 610,
          "method_count": 22,
          "methods": [
            {
              "name": "initiate_problem_oriented_inquiry",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 13,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "problem_definition",
                "inquiry_objectives"
              ],
              "return_annotation": "uuid.UUID",
              "decorators": []
            },
            {
              "name": "integrate_value_inquiry",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "inquiry_id",
                "stakeholders"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "validate_inquiry_knowledge",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 83,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "inquiry_id",
                "knowledge_claims"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "conduct_contextual_analysis",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 26,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "inquiry_id",
                "context_data"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_inquiry_framework_report",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 47,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_conduct_normative_evaluation",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 52,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value_inquiry",
                "problem_inquiry"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_assess_value_fact_integration",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value_inquiry",
                "problem_inquiry"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_link_value_to_problem_inquiry",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 25,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value_inquiry",
                "problem_inquiry"
              ],
              "return_annotation": "None",
              "decorators": []
            },
            {
              "name": "_evaluate_consequences",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "problem_inquiry"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_assess_instrumental_alignment",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value_inquiry"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_harm_minimization",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 10,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "problem_inquiry"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_assess_voice_representation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 5,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value_inquiry"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_deliberative_quality",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "value_inquiry"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_instrumental_effectiveness",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 21,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "claim",
                "problem_inquiry"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_problem_solving_utility",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "claim",
                "problem_inquiry"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_assess_stakeholder_consensus",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "claim",
                "problem_inquiry"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_assess_contextual_validity",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 9,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "claim",
                "problem_inquiry"
              ],
              "return_annotation": "Dict[str, float]",
              "decorators": []
            },
            {
              "name": "_get_related_knowledge",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "problem_inquiry"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_conduct_value_based_validation",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 17,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "claim",
                "problem_inquiry"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_conduct_democratic_validation",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "claim",
                "problem_inquiry"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_enhanced_validation_confidence",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 23,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "validation",
                "value_validation",
                "democratic_validation"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_generate_enhanced_validation_summary",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 48,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "validation_results",
                "problem_inquiry"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Set",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.problem_solving_framework.ProblemDefinition",
        "models.sfm_enums.AnalyticalMethod",
        "models.sfm_enums.KnowledgeType",
        "models.sfm_enums.ValidationMethod",
        "models.sfm_enums.InstitutionalScope",
        "models.sfm_enums.SystemLevel"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 435.58
    },
    {
      "filename": "core_nodes.py",
      "path": "/home/runner/work/beta/beta/models/core_nodes.py",
      "total_lines": 751,
      "class_count": 8,
      "function_count": 0,
      "classes": [
        {
          "name": "Actor",
          "line_count": 255,
          "method_count": 9,
          "methods": [
            {
              "name": "calculate_power_index",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "get_dominant_power_resource",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 5,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Optional[str]",
              "decorators": []
            },
            {
              "name": "assess_institutional_embeddedness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "analyze_actor_ci_orientation",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 56,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_transformation_influence_capacity",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 20,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_calculate_enabler_potential",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 22,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Tuple[float, List[str]]",
              "decorators": []
            },
            {
              "name": "_calculate_barrier_potential",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 14,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "_classify_transformation_role",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "enabler_score",
                "barrier_score"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "generate_actor_ci_engagement_strategy",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 58,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "Institution",
          "line_count": 256,
          "method_count": 10,
          "methods": [
            {
              "name": "calculate_institutional_effectiveness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 16,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "get_institutional_type_classification",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 11,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "str",
              "decorators": []
            },
            {
              "name": "assess_complementarity_strength",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "float",
              "decorators": []
            },
            {
              "name": "conduct_integrated_ci_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 41,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_ci_transformation_readiness",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 52,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "integrate_with_matrix_ci_analysis",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 35,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix_ci_data"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "_generate_ci_integration_recommendations",
              "implementation_status": "implemented",
              "has_docstring": true,
              "line_count": 34,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "systematic_results"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_identify_positive_spillovers",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 15,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix_ci_data"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_identify_negative_spillovers",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 12,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self",
                "matrix_ci_data"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            },
            {
              "name": "_suggest_spillover_management",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 8,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "List[str]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "Policy",
          "line_count": 136,
          "method_count": 3,
          "methods": [
            {
              "name": "evaluate_policy_ci_characteristics",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 40,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "assess_policy_transformation_impact",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 33,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, Any]",
              "decorators": []
            },
            {
              "name": "generate_policy_ci_recommendations",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 46,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "Dict[str, List[str]]",
              "decorators": []
            }
          ],
          "base_classes": [
            "Institution"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "Resource",
          "line_count": 5,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "Process",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "Flow",
          "line_count": 33,
          "method_count": 1,
          "methods": [
            {
              "name": "__post_init__",
              "implementation_status": "placeholder",
              "has_docstring": true,
              "line_count": 4,
              "has_todo": false,
              "has_notimplemented": false,
              "parameters": [
                "self"
              ],
              "return_annotation": "None",
              "decorators": []
            }
          ],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "ValueFlow",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Flow"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        },
        {
          "name": "GovernanceStructure",
          "line_count": 13,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Institution"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values",
            "Social Institutions",
            "Natural Environment"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.meta_entities.SpatialUnit",
        "models.meta_entities.Scenario",
        "models.metadata_models.TemporalDynamics",
        "models.sfm_enums.ResourceType",
        "models.sfm_enums.FlowNature",
        "models.sfm_enums.FlowType",
        "models.sfm_enums.EnumValidator",
        "models.ceremonial_instrumental.CeremonialInstrumentalAnalysis",
        "models.ceremonial_instrumental.CIMeasurementFramework"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Cultural Values",
      "complexity_score": 79.54592
    },
    {
      "filename": "behavioral_nodes.py",
      "path": "/home/runner/work/beta/beta/models/behavioral_nodes.py",
      "total_lines": 85,
      "class_count": 6,
      "function_count": 0,
      "classes": [
        {
          "name": "ValueHierarchy",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "CeremonialBehavior",
          "line_count": 6,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "InstrumentalBehavior",
          "line_count": 6,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Cultural Values"
          ],
          "is_dataclass": true
        },
        {
          "name": "ChangeProcess",
          "line_count": 11,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "CognitiveFramework",
          "line_count": 7,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Unclassified"
          ],
          "is_dataclass": true
        },
        {
          "name": "BehavioralPattern",
          "line_count": 8,
          "method_count": 0,
          "methods": [],
          "base_classes": [
            "Node"
          ],
          "has_docstring": true,
          "sfm_components": [
            "Personal Attitudes"
          ],
          "is_dataclass": true
        }
      ],
      "imports": [
        "__future__.annotations",
        "uuid",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "models.base_nodes.Node",
        "models.meta_entities.TimeSlice",
        "models.metadata_models.TemporalDynamics",
        "models.sfm_enums.LegitimacySource",
        "models.sfm_enums.ChangeType",
        "models.sfm_enums.BehaviorPatternType"
      ],
      "has_docstring": true,
      "sfm_focus_area": "Personal Attitudes",
      "complexity_score": 0.0
    }
  ]
}